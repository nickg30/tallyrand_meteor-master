[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar moment;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/momentjs_moment/moment.js                                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n//! moment.js                                                                                                        // 1\n//! version : 2.18.1                                                                                                 // 2\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors                                                       // 3\n//! license : MIT                                                                                                    // 4\n//! momentjs.com                                                                                                     // 5\n                                                                                                                     // 6\n;(function (global, factory) {                                                                                       // 7\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :                      // 8\n    typeof define === 'function' && define.amd ? define(factory) :                                                   // 9\n    global.moment = factory()                                                                                        // 10\n}(this, (function () { 'use strict';                                                                                 // 11\n                                                                                                                     // 12\nvar hookCallback;                                                                                                    // 13\n                                                                                                                     // 14\nfunction hooks () {                                                                                                  // 15\n    return hookCallback.apply(null, arguments);                                                                      // 16\n}                                                                                                                    // 17\n                                                                                                                     // 18\n// This is done to register the method called with moment()                                                          // 19\n// without creating circular dependencies.                                                                           // 20\nfunction setHookCallback (callback) {                                                                                // 21\n    hookCallback = callback;                                                                                         // 22\n}                                                                                                                    // 23\n                                                                                                                     // 24\nfunction isArray(input) {                                                                                            // 25\n    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';                     // 26\n}                                                                                                                    // 27\n                                                                                                                     // 28\nfunction isObject(input) {                                                                                           // 29\n    // IE8 will treat undefined and null as object if it wasn't for                                                  // 30\n    // input != null                                                                                                 // 31\n    return input != null && Object.prototype.toString.call(input) === '[object Object]';                             // 32\n}                                                                                                                    // 33\n                                                                                                                     // 34\nfunction isObjectEmpty(obj) {                                                                                        // 35\n    var k;                                                                                                           // 36\n    for (k in obj) {                                                                                                 // 37\n        // even if its not own property I'd still call it non-empty                                                  // 38\n        return false;                                                                                                // 39\n    }                                                                                                                // 40\n    return true;                                                                                                     // 41\n}                                                                                                                    // 42\n                                                                                                                     // 43\nfunction isUndefined(input) {                                                                                        // 44\n    return input === void 0;                                                                                         // 45\n}                                                                                                                    // 46\n                                                                                                                     // 47\nfunction isNumber(input) {                                                                                           // 48\n    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';                 // 49\n}                                                                                                                    // 50\n                                                                                                                     // 51\nfunction isDate(input) {                                                                                             // 52\n    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';                       // 53\n}                                                                                                                    // 54\n                                                                                                                     // 55\nfunction map(arr, fn) {                                                                                              // 56\n    var res = [], i;                                                                                                 // 57\n    for (i = 0; i < arr.length; ++i) {                                                                               // 58\n        res.push(fn(arr[i], i));                                                                                     // 59\n    }                                                                                                                // 60\n    return res;                                                                                                      // 61\n}                                                                                                                    // 62\n                                                                                                                     // 63\nfunction hasOwnProp(a, b) {                                                                                          // 64\n    return Object.prototype.hasOwnProperty.call(a, b);                                                               // 65\n}                                                                                                                    // 66\n                                                                                                                     // 67\nfunction extend(a, b) {                                                                                              // 68\n    for (var i in b) {                                                                                               // 69\n        if (hasOwnProp(b, i)) {                                                                                      // 70\n            a[i] = b[i];                                                                                             // 71\n        }                                                                                                            // 72\n    }                                                                                                                // 73\n                                                                                                                     // 74\n    if (hasOwnProp(b, 'toString')) {                                                                                 // 75\n        a.toString = b.toString;                                                                                     // 76\n    }                                                                                                                // 77\n                                                                                                                     // 78\n    if (hasOwnProp(b, 'valueOf')) {                                                                                  // 79\n        a.valueOf = b.valueOf;                                                                                       // 80\n    }                                                                                                                // 81\n                                                                                                                     // 82\n    return a;                                                                                                        // 83\n}                                                                                                                    // 84\n                                                                                                                     // 85\nfunction createUTC (input, format, locale, strict) {                                                                 // 86\n    return createLocalOrUTC(input, format, locale, strict, true).utc();                                              // 87\n}                                                                                                                    // 88\n                                                                                                                     // 89\nfunction defaultParsingFlags() {                                                                                     // 90\n    // We need to deep clone this object.                                                                            // 91\n    return {                                                                                                         // 92\n        empty           : false,                                                                                     // 93\n        unusedTokens    : [],                                                                                        // 94\n        unusedInput     : [],                                                                                        // 95\n        overflow        : -2,                                                                                        // 96\n        charsLeftOver   : 0,                                                                                         // 97\n        nullInput       : false,                                                                                     // 98\n        invalidMonth    : null,                                                                                      // 99\n        invalidFormat   : false,                                                                                     // 100\n        userInvalidated : false,                                                                                     // 101\n        iso             : false,                                                                                     // 102\n        parsedDateParts : [],                                                                                        // 103\n        meridiem        : null,                                                                                      // 104\n        rfc2822         : false,                                                                                     // 105\n        weekdayMismatch : false                                                                                      // 106\n    };                                                                                                               // 107\n}                                                                                                                    // 108\n                                                                                                                     // 109\nfunction getParsingFlags(m) {                                                                                        // 110\n    if (m._pf == null) {                                                                                             // 111\n        m._pf = defaultParsingFlags();                                                                               // 112\n    }                                                                                                                // 113\n    return m._pf;                                                                                                    // 114\n}                                                                                                                    // 115\n                                                                                                                     // 116\nvar some;                                                                                                            // 117\nif (Array.prototype.some) {                                                                                          // 118\n    some = Array.prototype.some;                                                                                     // 119\n} else {                                                                                                             // 120\n    some = function (fun) {                                                                                          // 121\n        var t = Object(this);                                                                                        // 122\n        var len = t.length >>> 0;                                                                                    // 123\n                                                                                                                     // 124\n        for (var i = 0; i < len; i++) {                                                                              // 125\n            if (i in t && fun.call(this, t[i], i, t)) {                                                              // 126\n                return true;                                                                                         // 127\n            }                                                                                                        // 128\n        }                                                                                                            // 129\n                                                                                                                     // 130\n        return false;                                                                                                // 131\n    };                                                                                                               // 132\n}                                                                                                                    // 133\n                                                                                                                     // 134\nvar some$1 = some;                                                                                                   // 135\n                                                                                                                     // 136\nfunction isValid(m) {                                                                                                // 137\n    if (m._isValid == null) {                                                                                        // 138\n        var flags = getParsingFlags(m);                                                                              // 139\n        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {                                          // 140\n            return i != null;                                                                                        // 141\n        });                                                                                                          // 142\n        var isNowValid = !isNaN(m._d.getTime()) &&                                                                   // 143\n            flags.overflow < 0 &&                                                                                    // 144\n            !flags.empty &&                                                                                          // 145\n            !flags.invalidMonth &&                                                                                   // 146\n            !flags.invalidWeekday &&                                                                                 // 147\n            !flags.nullInput &&                                                                                      // 148\n            !flags.invalidFormat &&                                                                                  // 149\n            !flags.userInvalidated &&                                                                                // 150\n            (!flags.meridiem || (flags.meridiem && parsedParts));                                                    // 151\n                                                                                                                     // 152\n        if (m._strict) {                                                                                             // 153\n            isNowValid = isNowValid &&                                                                               // 154\n                flags.charsLeftOver === 0 &&                                                                         // 155\n                flags.unusedTokens.length === 0 &&                                                                   // 156\n                flags.bigHour === undefined;                                                                         // 157\n        }                                                                                                            // 158\n                                                                                                                     // 159\n        if (Object.isFrozen == null || !Object.isFrozen(m)) {                                                        // 160\n            m._isValid = isNowValid;                                                                                 // 161\n        }                                                                                                            // 162\n        else {                                                                                                       // 163\n            return isNowValid;                                                                                       // 164\n        }                                                                                                            // 165\n    }                                                                                                                // 166\n    return m._isValid;                                                                                               // 167\n}                                                                                                                    // 168\n                                                                                                                     // 169\nfunction createInvalid (flags) {                                                                                     // 170\n    var m = createUTC(NaN);                                                                                          // 171\n    if (flags != null) {                                                                                             // 172\n        extend(getParsingFlags(m), flags);                                                                           // 173\n    }                                                                                                                // 174\n    else {                                                                                                           // 175\n        getParsingFlags(m).userInvalidated = true;                                                                   // 176\n    }                                                                                                                // 177\n                                                                                                                     // 178\n    return m;                                                                                                        // 179\n}                                                                                                                    // 180\n                                                                                                                     // 181\n// Plugins that add properties should also add the key here (null value),                                            // 182\n// so we can properly clone ourselves.                                                                               // 183\nvar momentProperties = hooks.momentProperties = [];                                                                  // 184\n                                                                                                                     // 185\nfunction copyConfig(to, from) {                                                                                      // 186\n    var i, prop, val;                                                                                                // 187\n                                                                                                                     // 188\n    if (!isUndefined(from._isAMomentObject)) {                                                                       // 189\n        to._isAMomentObject = from._isAMomentObject;                                                                 // 190\n    }                                                                                                                // 191\n    if (!isUndefined(from._i)) {                                                                                     // 192\n        to._i = from._i;                                                                                             // 193\n    }                                                                                                                // 194\n    if (!isUndefined(from._f)) {                                                                                     // 195\n        to._f = from._f;                                                                                             // 196\n    }                                                                                                                // 197\n    if (!isUndefined(from._l)) {                                                                                     // 198\n        to._l = from._l;                                                                                             // 199\n    }                                                                                                                // 200\n    if (!isUndefined(from._strict)) {                                                                                // 201\n        to._strict = from._strict;                                                                                   // 202\n    }                                                                                                                // 203\n    if (!isUndefined(from._tzm)) {                                                                                   // 204\n        to._tzm = from._tzm;                                                                                         // 205\n    }                                                                                                                // 206\n    if (!isUndefined(from._isUTC)) {                                                                                 // 207\n        to._isUTC = from._isUTC;                                                                                     // 208\n    }                                                                                                                // 209\n    if (!isUndefined(from._offset)) {                                                                                // 210\n        to._offset = from._offset;                                                                                   // 211\n    }                                                                                                                // 212\n    if (!isUndefined(from._pf)) {                                                                                    // 213\n        to._pf = getParsingFlags(from);                                                                              // 214\n    }                                                                                                                // 215\n    if (!isUndefined(from._locale)) {                                                                                // 216\n        to._locale = from._locale;                                                                                   // 217\n    }                                                                                                                // 218\n                                                                                                                     // 219\n    if (momentProperties.length > 0) {                                                                               // 220\n        for (i = 0; i < momentProperties.length; i++) {                                                              // 221\n            prop = momentProperties[i];                                                                              // 222\n            val = from[prop];                                                                                        // 223\n            if (!isUndefined(val)) {                                                                                 // 224\n                to[prop] = val;                                                                                      // 225\n            }                                                                                                        // 226\n        }                                                                                                            // 227\n    }                                                                                                                // 228\n                                                                                                                     // 229\n    return to;                                                                                                       // 230\n}                                                                                                                    // 231\n                                                                                                                     // 232\nvar updateInProgress = false;                                                                                        // 233\n                                                                                                                     // 234\n// Moment prototype object                                                                                           // 235\nfunction Moment(config) {                                                                                            // 236\n    copyConfig(this, config);                                                                                        // 237\n    this._d = new Date(config._d != null ? config._d.getTime() : NaN);                                               // 238\n    if (!this.isValid()) {                                                                                           // 239\n        this._d = new Date(NaN);                                                                                     // 240\n    }                                                                                                                // 241\n    // Prevent infinite loop in case updateOffset creates new moment                                                 // 242\n    // objects.                                                                                                      // 243\n    if (updateInProgress === false) {                                                                                // 244\n        updateInProgress = true;                                                                                     // 245\n        hooks.updateOffset(this);                                                                                    // 246\n        updateInProgress = false;                                                                                    // 247\n    }                                                                                                                // 248\n}                                                                                                                    // 249\n                                                                                                                     // 250\nfunction isMoment (obj) {                                                                                            // 251\n    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);                                   // 252\n}                                                                                                                    // 253\n                                                                                                                     // 254\nfunction absFloor (number) {                                                                                         // 255\n    if (number < 0) {                                                                                                // 256\n        // -0 -> 0                                                                                                   // 257\n        return Math.ceil(number) || 0;                                                                               // 258\n    } else {                                                                                                         // 259\n        return Math.floor(number);                                                                                   // 260\n    }                                                                                                                // 261\n}                                                                                                                    // 262\n                                                                                                                     // 263\nfunction toInt(argumentForCoercion) {                                                                                // 264\n    var coercedNumber = +argumentForCoercion,                                                                        // 265\n        value = 0;                                                                                                   // 266\n                                                                                                                     // 267\n    if (coercedNumber !== 0 && isFinite(coercedNumber)) {                                                            // 268\n        value = absFloor(coercedNumber);                                                                             // 269\n    }                                                                                                                // 270\n                                                                                                                     // 271\n    return value;                                                                                                    // 272\n}                                                                                                                    // 273\n                                                                                                                     // 274\n// compare two arrays, return the number of differences                                                              // 275\nfunction compareArrays(array1, array2, dontConvert) {                                                                // 276\n    var len = Math.min(array1.length, array2.length),                                                                // 277\n        lengthDiff = Math.abs(array1.length - array2.length),                                                        // 278\n        diffs = 0,                                                                                                   // 279\n        i;                                                                                                           // 280\n    for (i = 0; i < len; i++) {                                                                                      // 281\n        if ((dontConvert && array1[i] !== array2[i]) ||                                                              // 282\n            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {                                               // 283\n            diffs++;                                                                                                 // 284\n        }                                                                                                            // 285\n    }                                                                                                                // 286\n    return diffs + lengthDiff;                                                                                       // 287\n}                                                                                                                    // 288\n                                                                                                                     // 289\nfunction warn(msg) {                                                                                                 // 290\n    if (hooks.suppressDeprecationWarnings === false &&                                                               // 291\n            (typeof console !==  'undefined') && console.warn) {                                                     // 292\n        console.warn('Deprecation warning: ' + msg);                                                                 // 293\n    }                                                                                                                // 294\n}                                                                                                                    // 295\n                                                                                                                     // 296\nfunction deprecate(msg, fn) {                                                                                        // 297\n    var firstTime = true;                                                                                            // 298\n                                                                                                                     // 299\n    return extend(function () {                                                                                      // 300\n        if (hooks.deprecationHandler != null) {                                                                      // 301\n            hooks.deprecationHandler(null, msg);                                                                     // 302\n        }                                                                                                            // 303\n        if (firstTime) {                                                                                             // 304\n            var args = [];                                                                                           // 305\n            var arg;                                                                                                 // 306\n            for (var i = 0; i < arguments.length; i++) {                                                             // 307\n                arg = '';                                                                                            // 308\n                if (typeof arguments[i] === 'object') {                                                              // 309\n                    arg += '\\n[' + i + '] ';                                                                         // 310\n                    for (var key in arguments[0]) {                                                                  // 311\n                        arg += key + ': ' + arguments[0][key] + ', ';                                                // 312\n                    }                                                                                                // 313\n                    arg = arg.slice(0, -2); // Remove trailing comma and space                                       // 314\n                } else {                                                                                             // 315\n                    arg = arguments[i];                                                                              // 316\n                }                                                                                                    // 317\n                args.push(arg);                                                                                      // 318\n            }                                                                                                        // 319\n            warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + (new Error()).stack);    // 320\n            firstTime = false;                                                                                       // 321\n        }                                                                                                            // 322\n        return fn.apply(this, arguments);                                                                            // 323\n    }, fn);                                                                                                          // 324\n}                                                                                                                    // 325\n                                                                                                                     // 326\nvar deprecations = {};                                                                                               // 327\n                                                                                                                     // 328\nfunction deprecateSimple(name, msg) {                                                                                // 329\n    if (hooks.deprecationHandler != null) {                                                                          // 330\n        hooks.deprecationHandler(name, msg);                                                                         // 331\n    }                                                                                                                // 332\n    if (!deprecations[name]) {                                                                                       // 333\n        warn(msg);                                                                                                   // 334\n        deprecations[name] = true;                                                                                   // 335\n    }                                                                                                                // 336\n}                                                                                                                    // 337\n                                                                                                                     // 338\nhooks.suppressDeprecationWarnings = false;                                                                           // 339\nhooks.deprecationHandler = null;                                                                                     // 340\n                                                                                                                     // 341\nfunction isFunction(input) {                                                                                         // 342\n    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';               // 343\n}                                                                                                                    // 344\n                                                                                                                     // 345\nfunction set (config) {                                                                                              // 346\n    var prop, i;                                                                                                     // 347\n    for (i in config) {                                                                                              // 348\n        prop = config[i];                                                                                            // 349\n        if (isFunction(prop)) {                                                                                      // 350\n            this[i] = prop;                                                                                          // 351\n        } else {                                                                                                     // 352\n            this['_' + i] = prop;                                                                                    // 353\n        }                                                                                                            // 354\n    }                                                                                                                // 355\n    this._config = config;                                                                                           // 356\n    // Lenient ordinal parsing accepts just a number in addition to                                                  // 357\n    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.                                                // 358\n    // TODO: Remove \"ordinalParse\" fallback in next major release.                                                   // 359\n    this._dayOfMonthOrdinalParseLenient = new RegExp(                                                                // 360\n        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +                                         // 361\n            '|' + (/\\d{1,2}/).source);                                                                               // 362\n}                                                                                                                    // 363\n                                                                                                                     // 364\nfunction mergeConfigs(parentConfig, childConfig) {                                                                   // 365\n    var res = extend({}, parentConfig), prop;                                                                        // 366\n    for (prop in childConfig) {                                                                                      // 367\n        if (hasOwnProp(childConfig, prop)) {                                                                         // 368\n            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {                                       // 369\n                res[prop] = {};                                                                                      // 370\n                extend(res[prop], parentConfig[prop]);                                                               // 371\n                extend(res[prop], childConfig[prop]);                                                                // 372\n            } else if (childConfig[prop] != null) {                                                                  // 373\n                res[prop] = childConfig[prop];                                                                       // 374\n            } else {                                                                                                 // 375\n                delete res[prop];                                                                                    // 376\n            }                                                                                                        // 377\n        }                                                                                                            // 378\n    }                                                                                                                // 379\n    for (prop in parentConfig) {                                                                                     // 380\n        if (hasOwnProp(parentConfig, prop) &&                                                                        // 381\n                !hasOwnProp(childConfig, prop) &&                                                                    // 382\n                isObject(parentConfig[prop])) {                                                                      // 383\n            // make sure changes to properties don't modify parent config                                            // 384\n            res[prop] = extend({}, res[prop]);                                                                       // 385\n        }                                                                                                            // 386\n    }                                                                                                                // 387\n    return res;                                                                                                      // 388\n}                                                                                                                    // 389\n                                                                                                                     // 390\nfunction Locale(config) {                                                                                            // 391\n    if (config != null) {                                                                                            // 392\n        this.set(config);                                                                                            // 393\n    }                                                                                                                // 394\n}                                                                                                                    // 395\n                                                                                                                     // 396\nvar keys;                                                                                                            // 397\n                                                                                                                     // 398\nif (Object.keys) {                                                                                                   // 399\n    keys = Object.keys;                                                                                              // 400\n} else {                                                                                                             // 401\n    keys = function (obj) {                                                                                          // 402\n        var i, res = [];                                                                                             // 403\n        for (i in obj) {                                                                                             // 404\n            if (hasOwnProp(obj, i)) {                                                                                // 405\n                res.push(i);                                                                                         // 406\n            }                                                                                                        // 407\n        }                                                                                                            // 408\n        return res;                                                                                                  // 409\n    };                                                                                                               // 410\n}                                                                                                                    // 411\n                                                                                                                     // 412\nvar keys$1 = keys;                                                                                                   // 413\n                                                                                                                     // 414\nvar defaultCalendar = {                                                                                              // 415\n    sameDay : '[Today at] LT',                                                                                       // 416\n    nextDay : '[Tomorrow at] LT',                                                                                    // 417\n    nextWeek : 'dddd [at] LT',                                                                                       // 418\n    lastDay : '[Yesterday at] LT',                                                                                   // 419\n    lastWeek : '[Last] dddd [at] LT',                                                                                // 420\n    sameElse : 'L'                                                                                                   // 421\n};                                                                                                                   // 422\n                                                                                                                     // 423\nfunction calendar (key, mom, now) {                                                                                  // 424\n    var output = this._calendar[key] || this._calendar['sameElse'];                                                  // 425\n    return isFunction(output) ? output.call(mom, now) : output;                                                      // 426\n}                                                                                                                    // 427\n                                                                                                                     // 428\nvar defaultLongDateFormat = {                                                                                        // 429\n    LTS  : 'h:mm:ss A',                                                                                              // 430\n    LT   : 'h:mm A',                                                                                                 // 431\n    L    : 'MM/DD/YYYY',                                                                                             // 432\n    LL   : 'MMMM D, YYYY',                                                                                           // 433\n    LLL  : 'MMMM D, YYYY h:mm A',                                                                                    // 434\n    LLLL : 'dddd, MMMM D, YYYY h:mm A'                                                                               // 435\n};                                                                                                                   // 436\n                                                                                                                     // 437\nfunction longDateFormat (key) {                                                                                      // 438\n    var format = this._longDateFormat[key],                                                                          // 439\n        formatUpper = this._longDateFormat[key.toUpperCase()];                                                       // 440\n                                                                                                                     // 441\n    if (format || !formatUpper) {                                                                                    // 442\n        return format;                                                                                               // 443\n    }                                                                                                                // 444\n                                                                                                                     // 445\n    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {                             // 446\n        return val.slice(1);                                                                                         // 447\n    });                                                                                                              // 448\n                                                                                                                     // 449\n    return this._longDateFormat[key];                                                                                // 450\n}                                                                                                                    // 451\n                                                                                                                     // 452\nvar defaultInvalidDate = 'Invalid date';                                                                             // 453\n                                                                                                                     // 454\nfunction invalidDate () {                                                                                            // 455\n    return this._invalidDate;                                                                                        // 456\n}                                                                                                                    // 457\n                                                                                                                     // 458\nvar defaultOrdinal = '%d';                                                                                           // 459\nvar defaultDayOfMonthOrdinalParse = /\\d{1,2}/;                                                                       // 460\n                                                                                                                     // 461\nfunction ordinal (number) {                                                                                          // 462\n    return this._ordinal.replace('%d', number);                                                                      // 463\n}                                                                                                                    // 464\n                                                                                                                     // 465\nvar defaultRelativeTime = {                                                                                          // 466\n    future : 'in %s',                                                                                                // 467\n    past   : '%s ago',                                                                                               // 468\n    s  : 'a few seconds',                                                                                            // 469\n    ss : '%d seconds',                                                                                               // 470\n    m  : 'a minute',                                                                                                 // 471\n    mm : '%d minutes',                                                                                               // 472\n    h  : 'an hour',                                                                                                  // 473\n    hh : '%d hours',                                                                                                 // 474\n    d  : 'a day',                                                                                                    // 475\n    dd : '%d days',                                                                                                  // 476\n    M  : 'a month',                                                                                                  // 477\n    MM : '%d months',                                                                                                // 478\n    y  : 'a year',                                                                                                   // 479\n    yy : '%d years'                                                                                                  // 480\n};                                                                                                                   // 481\n                                                                                                                     // 482\nfunction relativeTime (number, withoutSuffix, string, isFuture) {                                                    // 483\n    var output = this._relativeTime[string];                                                                         // 484\n    return (isFunction(output)) ?                                                                                    // 485\n        output(number, withoutSuffix, string, isFuture) :                                                            // 486\n        output.replace(/%d/i, number);                                                                               // 487\n}                                                                                                                    // 488\n                                                                                                                     // 489\nfunction pastFuture (diff, output) {                                                                                 // 490\n    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];                                                   // 491\n    return isFunction(format) ? format(output) : format.replace(/%s/i, output);                                      // 492\n}                                                                                                                    // 493\n                                                                                                                     // 494\nvar aliases = {};                                                                                                    // 495\n                                                                                                                     // 496\nfunction addUnitAlias (unit, shorthand) {                                                                            // 497\n    var lowerCase = unit.toLowerCase();                                                                              // 498\n    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;                                       // 499\n}                                                                                                                    // 500\n                                                                                                                     // 501\nfunction normalizeUnits(units) {                                                                                     // 502\n    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;                   // 503\n}                                                                                                                    // 504\n                                                                                                                     // 505\nfunction normalizeObjectUnits(inputObject) {                                                                         // 506\n    var normalizedInput = {},                                                                                        // 507\n        normalizedProp,                                                                                              // 508\n        prop;                                                                                                        // 509\n                                                                                                                     // 510\n    for (prop in inputObject) {                                                                                      // 511\n        if (hasOwnProp(inputObject, prop)) {                                                                         // 512\n            normalizedProp = normalizeUnits(prop);                                                                   // 513\n            if (normalizedProp) {                                                                                    // 514\n                normalizedInput[normalizedProp] = inputObject[prop];                                                 // 515\n            }                                                                                                        // 516\n        }                                                                                                            // 517\n    }                                                                                                                // 518\n                                                                                                                     // 519\n    return normalizedInput;                                                                                          // 520\n}                                                                                                                    // 521\n                                                                                                                     // 522\nvar priorities = {};                                                                                                 // 523\n                                                                                                                     // 524\nfunction addUnitPriority(unit, priority) {                                                                           // 525\n    priorities[unit] = priority;                                                                                     // 526\n}                                                                                                                    // 527\n                                                                                                                     // 528\nfunction getPrioritizedUnits(unitsObj) {                                                                             // 529\n    var units = [];                                                                                                  // 530\n    for (var u in unitsObj) {                                                                                        // 531\n        units.push({unit: u, priority: priorities[u]});                                                              // 532\n    }                                                                                                                // 533\n    units.sort(function (a, b) {                                                                                     // 534\n        return a.priority - b.priority;                                                                              // 535\n    });                                                                                                              // 536\n    return units;                                                                                                    // 537\n}                                                                                                                    // 538\n                                                                                                                     // 539\nfunction makeGetSet (unit, keepTime) {                                                                               // 540\n    return function (value) {                                                                                        // 541\n        if (value != null) {                                                                                         // 542\n            set$1(this, unit, value);                                                                                // 543\n            hooks.updateOffset(this, keepTime);                                                                      // 544\n            return this;                                                                                             // 545\n        } else {                                                                                                     // 546\n            return get(this, unit);                                                                                  // 547\n        }                                                                                                            // 548\n    };                                                                                                               // 549\n}                                                                                                                    // 550\n                                                                                                                     // 551\nfunction get (mom, unit) {                                                                                           // 552\n    return mom.isValid() ?                                                                                           // 553\n        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;                                                    // 554\n}                                                                                                                    // 555\n                                                                                                                     // 556\nfunction set$1 (mom, unit, value) {                                                                                  // 557\n    if (mom.isValid()) {                                                                                             // 558\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);                                                     // 559\n    }                                                                                                                // 560\n}                                                                                                                    // 561\n                                                                                                                     // 562\n// MOMENTS                                                                                                           // 563\n                                                                                                                     // 564\nfunction stringGet (units) {                                                                                         // 565\n    units = normalizeUnits(units);                                                                                   // 566\n    if (isFunction(this[units])) {                                                                                   // 567\n        return this[units]();                                                                                        // 568\n    }                                                                                                                // 569\n    return this;                                                                                                     // 570\n}                                                                                                                    // 571\n                                                                                                                     // 572\n                                                                                                                     // 573\nfunction stringSet (units, value) {                                                                                  // 574\n    if (typeof units === 'object') {                                                                                 // 575\n        units = normalizeObjectUnits(units);                                                                         // 576\n        var prioritized = getPrioritizedUnits(units);                                                                // 577\n        for (var i = 0; i < prioritized.length; i++) {                                                               // 578\n            this[prioritized[i].unit](units[prioritized[i].unit]);                                                   // 579\n        }                                                                                                            // 580\n    } else {                                                                                                         // 581\n        units = normalizeUnits(units);                                                                               // 582\n        if (isFunction(this[units])) {                                                                               // 583\n            return this[units](value);                                                                               // 584\n        }                                                                                                            // 585\n    }                                                                                                                // 586\n    return this;                                                                                                     // 587\n}                                                                                                                    // 588\n                                                                                                                     // 589\nfunction zeroFill(number, targetLength, forceSign) {                                                                 // 590\n    var absNumber = '' + Math.abs(number),                                                                           // 591\n        zerosToFill = targetLength - absNumber.length,                                                               // 592\n        sign = number >= 0;                                                                                          // 593\n    return (sign ? (forceSign ? '+' : '') : '-') +                                                                   // 594\n        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;                                     // 595\n}                                                                                                                    // 596\n                                                                                                                     // 597\nvar formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n                                                                                                                     // 599\nvar localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;                                            // 600\n                                                                                                                     // 601\nvar formatFunctions = {};                                                                                            // 602\n                                                                                                                     // 603\nvar formatTokenFunctions = {};                                                                                       // 604\n                                                                                                                     // 605\n// token:    'M'                                                                                                     // 606\n// padded:   ['MM', 2]                                                                                               // 607\n// ordinal:  'Mo'                                                                                                    // 608\n// callback: function () { this.month() + 1 }                                                                        // 609\nfunction addFormatToken (token, padded, ordinal, callback) {                                                         // 610\n    var func = callback;                                                                                             // 611\n    if (typeof callback === 'string') {                                                                              // 612\n        func = function () {                                                                                         // 613\n            return this[callback]();                                                                                 // 614\n        };                                                                                                           // 615\n    }                                                                                                                // 616\n    if (token) {                                                                                                     // 617\n        formatTokenFunctions[token] = func;                                                                          // 618\n    }                                                                                                                // 619\n    if (padded) {                                                                                                    // 620\n        formatTokenFunctions[padded[0]] = function () {                                                              // 621\n            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);                                      // 622\n        };                                                                                                           // 623\n    }                                                                                                                // 624\n    if (ordinal) {                                                                                                   // 625\n        formatTokenFunctions[ordinal] = function () {                                                                // 626\n            return this.localeData().ordinal(func.apply(this, arguments), token);                                    // 627\n        };                                                                                                           // 628\n    }                                                                                                                // 629\n}                                                                                                                    // 630\n                                                                                                                     // 631\nfunction removeFormattingTokens(input) {                                                                             // 632\n    if (input.match(/\\[[\\s\\S]/)) {                                                                                   // 633\n        return input.replace(/^\\[|\\]$/g, '');                                                                        // 634\n    }                                                                                                                // 635\n    return input.replace(/\\\\/g, '');                                                                                 // 636\n}                                                                                                                    // 637\n                                                                                                                     // 638\nfunction makeFormatFunction(format) {                                                                                // 639\n    var array = format.match(formattingTokens), i, length;                                                           // 640\n                                                                                                                     // 641\n    for (i = 0, length = array.length; i < length; i++) {                                                            // 642\n        if (formatTokenFunctions[array[i]]) {                                                                        // 643\n            array[i] = formatTokenFunctions[array[i]];                                                               // 644\n        } else {                                                                                                     // 645\n            array[i] = removeFormattingTokens(array[i]);                                                             // 646\n        }                                                                                                            // 647\n    }                                                                                                                // 648\n                                                                                                                     // 649\n    return function (mom) {                                                                                          // 650\n        var output = '', i;                                                                                          // 651\n        for (i = 0; i < length; i++) {                                                                               // 652\n            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];                                  // 653\n        }                                                                                                            // 654\n        return output;                                                                                               // 655\n    };                                                                                                               // 656\n}                                                                                                                    // 657\n                                                                                                                     // 658\n// format date using native date object                                                                              // 659\nfunction formatMoment(m, format) {                                                                                   // 660\n    if (!m.isValid()) {                                                                                              // 661\n        return m.localeData().invalidDate();                                                                         // 662\n    }                                                                                                                // 663\n                                                                                                                     // 664\n    format = expandFormat(format, m.localeData());                                                                   // 665\n    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);                                 // 666\n                                                                                                                     // 667\n    return formatFunctions[format](m);                                                                               // 668\n}                                                                                                                    // 669\n                                                                                                                     // 670\nfunction expandFormat(format, locale) {                                                                              // 671\n    var i = 5;                                                                                                       // 672\n                                                                                                                     // 673\n    function replaceLongDateFormatTokens(input) {                                                                    // 674\n        return locale.longDateFormat(input) || input;                                                                // 675\n    }                                                                                                                // 676\n                                                                                                                     // 677\n    localFormattingTokens.lastIndex = 0;                                                                             // 678\n    while (i >= 0 && localFormattingTokens.test(format)) {                                                           // 679\n        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);                                 // 680\n        localFormattingTokens.lastIndex = 0;                                                                         // 681\n        i -= 1;                                                                                                      // 682\n    }                                                                                                                // 683\n                                                                                                                     // 684\n    return format;                                                                                                   // 685\n}                                                                                                                    // 686\n                                                                                                                     // 687\nvar match1         = /\\d/;            //       0 - 9                                                                 // 688\nvar match2         = /\\d\\d/;          //      00 - 99                                                                // 689\nvar match3         = /\\d{3}/;         //     000 - 999                                                               // 690\nvar match4         = /\\d{4}/;         //    0000 - 9999                                                              // 691\nvar match6         = /[+-]?\\d{6}/;    // -999999 - 999999                                                            // 692\nvar match1to2      = /\\d\\d?/;         //       0 - 99                                                                // 693\nvar match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999                                                              // 694\nvar match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999                                                            // 695\nvar match1to3      = /\\d{1,3}/;       //       0 - 999                                                               // 696\nvar match1to4      = /\\d{1,4}/;       //       0 - 9999                                                              // 697\nvar match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999                                                            // 698\n                                                                                                                     // 699\nvar matchUnsigned  = /\\d+/;           //       0 - inf                                                               // 700\nvar matchSigned    = /[+-]?\\d+/;      //    -inf - inf                                                               // 701\n                                                                                                                     // 702\nvar matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z                                         // 703\nvar matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z                          // 704\n                                                                                                                     // 705\nvar matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123                                              // 706\n                                                                                                                     // 707\n// any word (or two) characters or numbers including two/three word month in arabic.                                 // 708\n// includes scottish gaelic two word and hyphenated months                                                           // 709\nvar matchWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n                                                                                                                     // 711\n                                                                                                                     // 712\nvar regexes = {};                                                                                                    // 713\n                                                                                                                     // 714\nfunction addRegexToken (token, regex, strictRegex) {                                                                 // 715\n    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {                                   // 716\n        return (isStrict && strictRegex) ? strictRegex : regex;                                                      // 717\n    };                                                                                                               // 718\n}                                                                                                                    // 719\n                                                                                                                     // 720\nfunction getParseRegexForToken (token, config) {                                                                     // 721\n    if (!hasOwnProp(regexes, token)) {                                                                               // 722\n        return new RegExp(unescapeFormat(token));                                                                    // 723\n    }                                                                                                                // 724\n                                                                                                                     // 725\n    return regexes[token](config._strict, config._locale);                                                           // 726\n}                                                                                                                    // 727\n                                                                                                                     // 728\n// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript              // 729\nfunction unescapeFormat(s) {                                                                                         // 730\n    return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n        return p1 || p2 || p3 || p4;                                                                                 // 732\n    }));                                                                                                             // 733\n}                                                                                                                    // 734\n                                                                                                                     // 735\nfunction regexEscape(s) {                                                                                            // 736\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');                                                              // 737\n}                                                                                                                    // 738\n                                                                                                                     // 739\nvar tokens = {};                                                                                                     // 740\n                                                                                                                     // 741\nfunction addParseToken (token, callback) {                                                                           // 742\n    var i, func = callback;                                                                                          // 743\n    if (typeof token === 'string') {                                                                                 // 744\n        token = [token];                                                                                             // 745\n    }                                                                                                                // 746\n    if (isNumber(callback)) {                                                                                        // 747\n        func = function (input, array) {                                                                             // 748\n            array[callback] = toInt(input);                                                                          // 749\n        };                                                                                                           // 750\n    }                                                                                                                // 751\n    for (i = 0; i < token.length; i++) {                                                                             // 752\n        tokens[token[i]] = func;                                                                                     // 753\n    }                                                                                                                // 754\n}                                                                                                                    // 755\n                                                                                                                     // 756\nfunction addWeekParseToken (token, callback) {                                                                       // 757\n    addParseToken(token, function (input, array, config, token) {                                                    // 758\n        config._w = config._w || {};                                                                                 // 759\n        callback(input, config._w, config, token);                                                                   // 760\n    });                                                                                                              // 761\n}                                                                                                                    // 762\n                                                                                                                     // 763\nfunction addTimeToArrayFromToken(token, input, config) {                                                             // 764\n    if (input != null && hasOwnProp(tokens, token)) {                                                                // 765\n        tokens[token](input, config._a, config, token);                                                              // 766\n    }                                                                                                                // 767\n}                                                                                                                    // 768\n                                                                                                                     // 769\nvar YEAR = 0;                                                                                                        // 770\nvar MONTH = 1;                                                                                                       // 771\nvar DATE = 2;                                                                                                        // 772\nvar HOUR = 3;                                                                                                        // 773\nvar MINUTE = 4;                                                                                                      // 774\nvar SECOND = 5;                                                                                                      // 775\nvar MILLISECOND = 6;                                                                                                 // 776\nvar WEEK = 7;                                                                                                        // 777\nvar WEEKDAY = 8;                                                                                                     // 778\n                                                                                                                     // 779\nvar indexOf;                                                                                                         // 780\n                                                                                                                     // 781\nif (Array.prototype.indexOf) {                                                                                       // 782\n    indexOf = Array.prototype.indexOf;                                                                               // 783\n} else {                                                                                                             // 784\n    indexOf = function (o) {                                                                                         // 785\n        // I know                                                                                                    // 786\n        var i;                                                                                                       // 787\n        for (i = 0; i < this.length; ++i) {                                                                          // 788\n            if (this[i] === o) {                                                                                     // 789\n                return i;                                                                                            // 790\n            }                                                                                                        // 791\n        }                                                                                                            // 792\n        return -1;                                                                                                   // 793\n    };                                                                                                               // 794\n}                                                                                                                    // 795\n                                                                                                                     // 796\nvar indexOf$1 = indexOf;                                                                                             // 797\n                                                                                                                     // 798\nfunction daysInMonth(year, month) {                                                                                  // 799\n    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();                                                      // 800\n}                                                                                                                    // 801\n                                                                                                                     // 802\n// FORMATTING                                                                                                        // 803\n                                                                                                                     // 804\naddFormatToken('M', ['MM', 2], 'Mo', function () {                                                                   // 805\n    return this.month() + 1;                                                                                         // 806\n});                                                                                                                  // 807\n                                                                                                                     // 808\naddFormatToken('MMM', 0, 0, function (format) {                                                                      // 809\n    return this.localeData().monthsShort(this, format);                                                              // 810\n});                                                                                                                  // 811\n                                                                                                                     // 812\naddFormatToken('MMMM', 0, 0, function (format) {                                                                     // 813\n    return this.localeData().months(this, format);                                                                   // 814\n});                                                                                                                  // 815\n                                                                                                                     // 816\n// ALIASES                                                                                                           // 817\n                                                                                                                     // 818\naddUnitAlias('month', 'M');                                                                                          // 819\n                                                                                                                     // 820\n// PRIORITY                                                                                                          // 821\n                                                                                                                     // 822\naddUnitPriority('month', 8);                                                                                         // 823\n                                                                                                                     // 824\n// PARSING                                                                                                           // 825\n                                                                                                                     // 826\naddRegexToken('M',    match1to2);                                                                                    // 827\naddRegexToken('MM',   match1to2, match2);                                                                            // 828\naddRegexToken('MMM',  function (isStrict, locale) {                                                                  // 829\n    return locale.monthsShortRegex(isStrict);                                                                        // 830\n});                                                                                                                  // 831\naddRegexToken('MMMM', function (isStrict, locale) {                                                                  // 832\n    return locale.monthsRegex(isStrict);                                                                             // 833\n});                                                                                                                  // 834\n                                                                                                                     // 835\naddParseToken(['M', 'MM'], function (input, array) {                                                                 // 836\n    array[MONTH] = toInt(input) - 1;                                                                                 // 837\n});                                                                                                                  // 838\n                                                                                                                     // 839\naddParseToken(['MMM', 'MMMM'], function (input, array, config, token) {                                              // 840\n    var month = config._locale.monthsParse(input, token, config._strict);                                            // 841\n    // if we didn't find a month name, mark the date as invalid.                                                     // 842\n    if (month != null) {                                                                                             // 843\n        array[MONTH] = month;                                                                                        // 844\n    } else {                                                                                                         // 845\n        getParsingFlags(config).invalidMonth = input;                                                                // 846\n    }                                                                                                                // 847\n});                                                                                                                  // 848\n                                                                                                                     // 849\n// LOCALES                                                                                                           // 850\n                                                                                                                     // 851\nvar MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;                                                              // 852\nvar defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\nfunction localeMonths (m, format) {                                                                                  // 854\n    if (!m) {                                                                                                        // 855\n        return isArray(this._months) ? this._months :                                                                // 856\n            this._months['standalone'];                                                                              // 857\n    }                                                                                                                // 858\n    return isArray(this._months) ? this._months[m.month()] :                                                         // 859\n        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n}                                                                                                                    // 861\n                                                                                                                     // 862\nvar defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');                         // 863\nfunction localeMonthsShort (m, format) {                                                                             // 864\n    if (!m) {                                                                                                        // 865\n        return isArray(this._monthsShort) ? this._monthsShort :                                                      // 866\n            this._monthsShort['standalone'];                                                                         // 867\n    }                                                                                                                // 868\n    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :                                               // 869\n        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];                       // 870\n}                                                                                                                    // 871\n                                                                                                                     // 872\nfunction handleStrictParse(monthName, format, strict) {                                                              // 873\n    var i, ii, mom, llc = monthName.toLocaleLowerCase();                                                             // 874\n    if (!this._monthsParse) {                                                                                        // 875\n        // this is not used                                                                                          // 876\n        this._monthsParse = [];                                                                                      // 877\n        this._longMonthsParse = [];                                                                                  // 878\n        this._shortMonthsParse = [];                                                                                 // 879\n        for (i = 0; i < 12; ++i) {                                                                                   // 880\n            mom = createUTC([2000, i]);                                                                              // 881\n            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();                               // 882\n            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();                                     // 883\n        }                                                                                                            // 884\n    }                                                                                                                // 885\n                                                                                                                     // 886\n    if (strict) {                                                                                                    // 887\n        if (format === 'MMM') {                                                                                      // 888\n            ii = indexOf$1.call(this._shortMonthsParse, llc);                                                        // 889\n            return ii !== -1 ? ii : null;                                                                            // 890\n        } else {                                                                                                     // 891\n            ii = indexOf$1.call(this._longMonthsParse, llc);                                                         // 892\n            return ii !== -1 ? ii : null;                                                                            // 893\n        }                                                                                                            // 894\n    } else {                                                                                                         // 895\n        if (format === 'MMM') {                                                                                      // 896\n            ii = indexOf$1.call(this._shortMonthsParse, llc);                                                        // 897\n            if (ii !== -1) {                                                                                         // 898\n                return ii;                                                                                           // 899\n            }                                                                                                        // 900\n            ii = indexOf$1.call(this._longMonthsParse, llc);                                                         // 901\n            return ii !== -1 ? ii : null;                                                                            // 902\n        } else {                                                                                                     // 903\n            ii = indexOf$1.call(this._longMonthsParse, llc);                                                         // 904\n            if (ii !== -1) {                                                                                         // 905\n                return ii;                                                                                           // 906\n            }                                                                                                        // 907\n            ii = indexOf$1.call(this._shortMonthsParse, llc);                                                        // 908\n            return ii !== -1 ? ii : null;                                                                            // 909\n        }                                                                                                            // 910\n    }                                                                                                                // 911\n}                                                                                                                    // 912\n                                                                                                                     // 913\nfunction localeMonthsParse (monthName, format, strict) {                                                             // 914\n    var i, mom, regex;                                                                                               // 915\n                                                                                                                     // 916\n    if (this._monthsParseExact) {                                                                                    // 917\n        return handleStrictParse.call(this, monthName, format, strict);                                              // 918\n    }                                                                                                                // 919\n                                                                                                                     // 920\n    if (!this._monthsParse) {                                                                                        // 921\n        this._monthsParse = [];                                                                                      // 922\n        this._longMonthsParse = [];                                                                                  // 923\n        this._shortMonthsParse = [];                                                                                 // 924\n    }                                                                                                                // 925\n                                                                                                                     // 926\n    // TODO: add sorting                                                                                             // 927\n    // Sorting makes sure if one month (or abbr) is a prefix of another                                              // 928\n    // see sorting in computeMonthsParse                                                                             // 929\n    for (i = 0; i < 12; i++) {                                                                                       // 930\n        // make the regex if we don't have it already                                                                // 931\n        mom = createUTC([2000, i]);                                                                                  // 932\n        if (strict && !this._longMonthsParse[i]) {                                                                   // 933\n            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');           // 934\n            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');     // 935\n        }                                                                                                            // 936\n        if (!strict && !this._monthsParse[i]) {                                                                      // 937\n            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');                                   // 938\n            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');                                          // 939\n        }                                                                                                            // 940\n        // test the regex                                                                                            // 941\n        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {                               // 942\n            return i;                                                                                                // 943\n        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {                        // 944\n            return i;                                                                                                // 945\n        } else if (!strict && this._monthsParse[i].test(monthName)) {                                                // 946\n            return i;                                                                                                // 947\n        }                                                                                                            // 948\n    }                                                                                                                // 949\n}                                                                                                                    // 950\n                                                                                                                     // 951\n// MOMENTS                                                                                                           // 952\n                                                                                                                     // 953\nfunction setMonth (mom, value) {                                                                                     // 954\n    var dayOfMonth;                                                                                                  // 955\n                                                                                                                     // 956\n    if (!mom.isValid()) {                                                                                            // 957\n        // No op                                                                                                     // 958\n        return mom;                                                                                                  // 959\n    }                                                                                                                // 960\n                                                                                                                     // 961\n    if (typeof value === 'string') {                                                                                 // 962\n        if (/^\\d+$/.test(value)) {                                                                                   // 963\n            value = toInt(value);                                                                                    // 964\n        } else {                                                                                                     // 965\n            value = mom.localeData().monthsParse(value);                                                             // 966\n            // TODO: Another silent failure?                                                                         // 967\n            if (!isNumber(value)) {                                                                                  // 968\n                return mom;                                                                                          // 969\n            }                                                                                                        // 970\n        }                                                                                                            // 971\n    }                                                                                                                // 972\n                                                                                                                     // 973\n    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));                                               // 974\n    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);                                          // 975\n    return mom;                                                                                                      // 976\n}                                                                                                                    // 977\n                                                                                                                     // 978\nfunction getSetMonth (value) {                                                                                       // 979\n    if (value != null) {                                                                                             // 980\n        setMonth(this, value);                                                                                       // 981\n        hooks.updateOffset(this, true);                                                                              // 982\n        return this;                                                                                                 // 983\n    } else {                                                                                                         // 984\n        return get(this, 'Month');                                                                                   // 985\n    }                                                                                                                // 986\n}                                                                                                                    // 987\n                                                                                                                     // 988\nfunction getDaysInMonth () {                                                                                         // 989\n    return daysInMonth(this.year(), this.month());                                                                   // 990\n}                                                                                                                    // 991\n                                                                                                                     // 992\nvar defaultMonthsShortRegex = matchWord;                                                                             // 993\nfunction monthsShortRegex (isStrict) {                                                                               // 994\n    if (this._monthsParseExact) {                                                                                    // 995\n        if (!hasOwnProp(this, '_monthsRegex')) {                                                                     // 996\n            computeMonthsParse.call(this);                                                                           // 997\n        }                                                                                                            // 998\n        if (isStrict) {                                                                                              // 999\n            return this._monthsShortStrictRegex;                                                                     // 1000\n        } else {                                                                                                     // 1001\n            return this._monthsShortRegex;                                                                           // 1002\n        }                                                                                                            // 1003\n    } else {                                                                                                         // 1004\n        if (!hasOwnProp(this, '_monthsShortRegex')) {                                                                // 1005\n            this._monthsShortRegex = defaultMonthsShortRegex;                                                        // 1006\n        }                                                                                                            // 1007\n        return this._monthsShortStrictRegex && isStrict ?                                                            // 1008\n            this._monthsShortStrictRegex : this._monthsShortRegex;                                                   // 1009\n    }                                                                                                                // 1010\n}                                                                                                                    // 1011\n                                                                                                                     // 1012\nvar defaultMonthsRegex = matchWord;                                                                                  // 1013\nfunction monthsRegex (isStrict) {                                                                                    // 1014\n    if (this._monthsParseExact) {                                                                                    // 1015\n        if (!hasOwnProp(this, '_monthsRegex')) {                                                                     // 1016\n            computeMonthsParse.call(this);                                                                           // 1017\n        }                                                                                                            // 1018\n        if (isStrict) {                                                                                              // 1019\n            return this._monthsStrictRegex;                                                                          // 1020\n        } else {                                                                                                     // 1021\n            return this._monthsRegex;                                                                                // 1022\n        }                                                                                                            // 1023\n    } else {                                                                                                         // 1024\n        if (!hasOwnProp(this, '_monthsRegex')) {                                                                     // 1025\n            this._monthsRegex = defaultMonthsRegex;                                                                  // 1026\n        }                                                                                                            // 1027\n        return this._monthsStrictRegex && isStrict ?                                                                 // 1028\n            this._monthsStrictRegex : this._monthsRegex;                                                             // 1029\n    }                                                                                                                // 1030\n}                                                                                                                    // 1031\n                                                                                                                     // 1032\nfunction computeMonthsParse () {                                                                                     // 1033\n    function cmpLenRev(a, b) {                                                                                       // 1034\n        return b.length - a.length;                                                                                  // 1035\n    }                                                                                                                // 1036\n                                                                                                                     // 1037\n    var shortPieces = [], longPieces = [], mixedPieces = [],                                                         // 1038\n        i, mom;                                                                                                      // 1039\n    for (i = 0; i < 12; i++) {                                                                                       // 1040\n        // make the regex if we don't have it already                                                                // 1041\n        mom = createUTC([2000, i]);                                                                                  // 1042\n        shortPieces.push(this.monthsShort(mom, ''));                                                                 // 1043\n        longPieces.push(this.months(mom, ''));                                                                       // 1044\n        mixedPieces.push(this.months(mom, ''));                                                                      // 1045\n        mixedPieces.push(this.monthsShort(mom, ''));                                                                 // 1046\n    }                                                                                                                // 1047\n    // Sorting makes sure if one month (or abbr) is a prefix of another it                                           // 1048\n    // will match the longer piece.                                                                                  // 1049\n    shortPieces.sort(cmpLenRev);                                                                                     // 1050\n    longPieces.sort(cmpLenRev);                                                                                      // 1051\n    mixedPieces.sort(cmpLenRev);                                                                                     // 1052\n    for (i = 0; i < 12; i++) {                                                                                       // 1053\n        shortPieces[i] = regexEscape(shortPieces[i]);                                                                // 1054\n        longPieces[i] = regexEscape(longPieces[i]);                                                                  // 1055\n    }                                                                                                                // 1056\n    for (i = 0; i < 24; i++) {                                                                                       // 1057\n        mixedPieces[i] = regexEscape(mixedPieces[i]);                                                                // 1058\n    }                                                                                                                // 1059\n                                                                                                                     // 1060\n    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');                                         // 1061\n    this._monthsShortRegex = this._monthsRegex;                                                                      // 1062\n    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');                                    // 1063\n    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');                              // 1064\n}                                                                                                                    // 1065\n                                                                                                                     // 1066\n// FORMATTING                                                                                                        // 1067\n                                                                                                                     // 1068\naddFormatToken('Y', 0, 0, function () {                                                                              // 1069\n    var y = this.year();                                                                                             // 1070\n    return y <= 9999 ? '' + y : '+' + y;                                                                             // 1071\n});                                                                                                                  // 1072\n                                                                                                                     // 1073\naddFormatToken(0, ['YY', 2], 0, function () {                                                                        // 1074\n    return this.year() % 100;                                                                                        // 1075\n});                                                                                                                  // 1076\n                                                                                                                     // 1077\naddFormatToken(0, ['YYYY',   4],       0, 'year');                                                                   // 1078\naddFormatToken(0, ['YYYYY',  5],       0, 'year');                                                                   // 1079\naddFormatToken(0, ['YYYYYY', 6, true], 0, 'year');                                                                   // 1080\n                                                                                                                     // 1081\n// ALIASES                                                                                                           // 1082\n                                                                                                                     // 1083\naddUnitAlias('year', 'y');                                                                                           // 1084\n                                                                                                                     // 1085\n// PRIORITIES                                                                                                        // 1086\n                                                                                                                     // 1087\naddUnitPriority('year', 1);                                                                                          // 1088\n                                                                                                                     // 1089\n// PARSING                                                                                                           // 1090\n                                                                                                                     // 1091\naddRegexToken('Y',      matchSigned);                                                                                // 1092\naddRegexToken('YY',     match1to2, match2);                                                                          // 1093\naddRegexToken('YYYY',   match1to4, match4);                                                                          // 1094\naddRegexToken('YYYYY',  match1to6, match6);                                                                          // 1095\naddRegexToken('YYYYYY', match1to6, match6);                                                                          // 1096\n                                                                                                                     // 1097\naddParseToken(['YYYYY', 'YYYYYY'], YEAR);                                                                            // 1098\naddParseToken('YYYY', function (input, array) {                                                                      // 1099\n    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);                                // 1100\n});                                                                                                                  // 1101\naddParseToken('YY', function (input, array) {                                                                        // 1102\n    array[YEAR] = hooks.parseTwoDigitYear(input);                                                                    // 1103\n});                                                                                                                  // 1104\naddParseToken('Y', function (input, array) {                                                                         // 1105\n    array[YEAR] = parseInt(input, 10);                                                                               // 1106\n});                                                                                                                  // 1107\n                                                                                                                     // 1108\n// HELPERS                                                                                                           // 1109\n                                                                                                                     // 1110\nfunction daysInYear(year) {                                                                                          // 1111\n    return isLeapYear(year) ? 366 : 365;                                                                             // 1112\n}                                                                                                                    // 1113\n                                                                                                                     // 1114\nfunction isLeapYear(year) {                                                                                          // 1115\n    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;                                                 // 1116\n}                                                                                                                    // 1117\n                                                                                                                     // 1118\n// HOOKS                                                                                                             // 1119\n                                                                                                                     // 1120\nhooks.parseTwoDigitYear = function (input) {                                                                         // 1121\n    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);                                                         // 1122\n};                                                                                                                   // 1123\n                                                                                                                     // 1124\n// MOMENTS                                                                                                           // 1125\n                                                                                                                     // 1126\nvar getSetYear = makeGetSet('FullYear', true);                                                                       // 1127\n                                                                                                                     // 1128\nfunction getIsLeapYear () {                                                                                          // 1129\n    return isLeapYear(this.year());                                                                                  // 1130\n}                                                                                                                    // 1131\n                                                                                                                     // 1132\nfunction createDate (y, m, d, h, M, s, ms) {                                                                         // 1133\n    // can't just apply() to create a date:                                                                          // 1134\n    // https://stackoverflow.com/q/181348                                                                            // 1135\n    var date = new Date(y, m, d, h, M, s, ms);                                                                       // 1136\n                                                                                                                     // 1137\n    // the date constructor remaps years 0-99 to 1900-1999                                                           // 1138\n    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {                                                         // 1139\n        date.setFullYear(y);                                                                                         // 1140\n    }                                                                                                                // 1141\n    return date;                                                                                                     // 1142\n}                                                                                                                    // 1143\n                                                                                                                     // 1144\nfunction createUTCDate (y) {                                                                                         // 1145\n    var date = new Date(Date.UTC.apply(null, arguments));                                                            // 1146\n                                                                                                                     // 1147\n    // the Date.UTC function remaps years 0-99 to 1900-1999                                                          // 1148\n    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {                                                      // 1149\n        date.setUTCFullYear(y);                                                                                      // 1150\n    }                                                                                                                // 1151\n    return date;                                                                                                     // 1152\n}                                                                                                                    // 1153\n                                                                                                                     // 1154\n// start-of-first-week - start-of-year                                                                               // 1155\nfunction firstWeekOffset(year, dow, doy) {                                                                           // 1156\n    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)                      // 1157\n        fwd = 7 + dow - doy,                                                                                         // 1158\n        // first-week day local weekday -- which local weekday is fwd                                                // 1159\n        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;                                             // 1160\n                                                                                                                     // 1161\n    return -fwdlw + fwd - 1;                                                                                         // 1162\n}                                                                                                                    // 1163\n                                                                                                                     // 1164\n// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday          // 1165\nfunction dayOfYearFromWeeks(year, week, weekday, dow, doy) {                                                         // 1166\n    var localWeekday = (7 + weekday - dow) % 7,                                                                      // 1167\n        weekOffset = firstWeekOffset(year, dow, doy),                                                                // 1168\n        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,                                                  // 1169\n        resYear, resDayOfYear;                                                                                       // 1170\n                                                                                                                     // 1171\n    if (dayOfYear <= 0) {                                                                                            // 1172\n        resYear = year - 1;                                                                                          // 1173\n        resDayOfYear = daysInYear(resYear) + dayOfYear;                                                              // 1174\n    } else if (dayOfYear > daysInYear(year)) {                                                                       // 1175\n        resYear = year + 1;                                                                                          // 1176\n        resDayOfYear = dayOfYear - daysInYear(year);                                                                 // 1177\n    } else {                                                                                                         // 1178\n        resYear = year;                                                                                              // 1179\n        resDayOfYear = dayOfYear;                                                                                    // 1180\n    }                                                                                                                // 1181\n                                                                                                                     // 1182\n    return {                                                                                                         // 1183\n        year: resYear,                                                                                               // 1184\n        dayOfYear: resDayOfYear                                                                                      // 1185\n    };                                                                                                               // 1186\n}                                                                                                                    // 1187\n                                                                                                                     // 1188\nfunction weekOfYear(mom, dow, doy) {                                                                                 // 1189\n    var weekOffset = firstWeekOffset(mom.year(), dow, doy),                                                          // 1190\n        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,                                               // 1191\n        resWeek, resYear;                                                                                            // 1192\n                                                                                                                     // 1193\n    if (week < 1) {                                                                                                  // 1194\n        resYear = mom.year() - 1;                                                                                    // 1195\n        resWeek = week + weeksInYear(resYear, dow, doy);                                                             // 1196\n    } else if (week > weeksInYear(mom.year(), dow, doy)) {                                                           // 1197\n        resWeek = week - weeksInYear(mom.year(), dow, doy);                                                          // 1198\n        resYear = mom.year() + 1;                                                                                    // 1199\n    } else {                                                                                                         // 1200\n        resYear = mom.year();                                                                                        // 1201\n        resWeek = week;                                                                                              // 1202\n    }                                                                                                                // 1203\n                                                                                                                     // 1204\n    return {                                                                                                         // 1205\n        week: resWeek,                                                                                               // 1206\n        year: resYear                                                                                                // 1207\n    };                                                                                                               // 1208\n}                                                                                                                    // 1209\n                                                                                                                     // 1210\nfunction weeksInYear(year, dow, doy) {                                                                               // 1211\n    var weekOffset = firstWeekOffset(year, dow, doy),                                                                // 1212\n        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);                                                        // 1213\n    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;                                                     // 1214\n}                                                                                                                    // 1215\n                                                                                                                     // 1216\n// FORMATTING                                                                                                        // 1217\n                                                                                                                     // 1218\naddFormatToken('w', ['ww', 2], 'wo', 'week');                                                                        // 1219\naddFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');                                                                     // 1220\n                                                                                                                     // 1221\n// ALIASES                                                                                                           // 1222\n                                                                                                                     // 1223\naddUnitAlias('week', 'w');                                                                                           // 1224\naddUnitAlias('isoWeek', 'W');                                                                                        // 1225\n                                                                                                                     // 1226\n// PRIORITIES                                                                                                        // 1227\n                                                                                                                     // 1228\naddUnitPriority('week', 5);                                                                                          // 1229\naddUnitPriority('isoWeek', 5);                                                                                       // 1230\n                                                                                                                     // 1231\n// PARSING                                                                                                           // 1232\n                                                                                                                     // 1233\naddRegexToken('w',  match1to2);                                                                                      // 1234\naddRegexToken('ww', match1to2, match2);                                                                              // 1235\naddRegexToken('W',  match1to2);                                                                                      // 1236\naddRegexToken('WW', match1to2, match2);                                                                              // 1237\n                                                                                                                     // 1238\naddWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {                                    // 1239\n    week[token.substr(0, 1)] = toInt(input);                                                                         // 1240\n});                                                                                                                  // 1241\n                                                                                                                     // 1242\n// HELPERS                                                                                                           // 1243\n                                                                                                                     // 1244\n// LOCALES                                                                                                           // 1245\n                                                                                                                     // 1246\nfunction localeWeek (mom) {                                                                                          // 1247\n    return weekOfYear(mom, this._week.dow, this._week.doy).week;                                                     // 1248\n}                                                                                                                    // 1249\n                                                                                                                     // 1250\nvar defaultLocaleWeek = {                                                                                            // 1251\n    dow : 0, // Sunday is the first day of the week.                                                                 // 1252\n    doy : 6  // The week that contains Jan 1st is the first week of the year.                                        // 1253\n};                                                                                                                   // 1254\n                                                                                                                     // 1255\nfunction localeFirstDayOfWeek () {                                                                                   // 1256\n    return this._week.dow;                                                                                           // 1257\n}                                                                                                                    // 1258\n                                                                                                                     // 1259\nfunction localeFirstDayOfYear () {                                                                                   // 1260\n    return this._week.doy;                                                                                           // 1261\n}                                                                                                                    // 1262\n                                                                                                                     // 1263\n// MOMENTS                                                                                                           // 1264\n                                                                                                                     // 1265\nfunction getSetWeek (input) {                                                                                        // 1266\n    var week = this.localeData().week(this);                                                                         // 1267\n    return input == null ? week : this.add((input - week) * 7, 'd');                                                 // 1268\n}                                                                                                                    // 1269\n                                                                                                                     // 1270\nfunction getSetISOWeek (input) {                                                                                     // 1271\n    var week = weekOfYear(this, 1, 4).week;                                                                          // 1272\n    return input == null ? week : this.add((input - week) * 7, 'd');                                                 // 1273\n}                                                                                                                    // 1274\n                                                                                                                     // 1275\n// FORMATTING                                                                                                        // 1276\n                                                                                                                     // 1277\naddFormatToken('d', 0, 'do', 'day');                                                                                 // 1278\n                                                                                                                     // 1279\naddFormatToken('dd', 0, 0, function (format) {                                                                       // 1280\n    return this.localeData().weekdaysMin(this, format);                                                              // 1281\n});                                                                                                                  // 1282\n                                                                                                                     // 1283\naddFormatToken('ddd', 0, 0, function (format) {                                                                      // 1284\n    return this.localeData().weekdaysShort(this, format);                                                            // 1285\n});                                                                                                                  // 1286\n                                                                                                                     // 1287\naddFormatToken('dddd', 0, 0, function (format) {                                                                     // 1288\n    return this.localeData().weekdays(this, format);                                                                 // 1289\n});                                                                                                                  // 1290\n                                                                                                                     // 1291\naddFormatToken('e', 0, 0, 'weekday');                                                                                // 1292\naddFormatToken('E', 0, 0, 'isoWeekday');                                                                             // 1293\n                                                                                                                     // 1294\n// ALIASES                                                                                                           // 1295\n                                                                                                                     // 1296\naddUnitAlias('day', 'd');                                                                                            // 1297\naddUnitAlias('weekday', 'e');                                                                                        // 1298\naddUnitAlias('isoWeekday', 'E');                                                                                     // 1299\n                                                                                                                     // 1300\n// PRIORITY                                                                                                          // 1301\naddUnitPriority('day', 11);                                                                                          // 1302\naddUnitPriority('weekday', 11);                                                                                      // 1303\naddUnitPriority('isoWeekday', 11);                                                                                   // 1304\n                                                                                                                     // 1305\n// PARSING                                                                                                           // 1306\n                                                                                                                     // 1307\naddRegexToken('d',    match1to2);                                                                                    // 1308\naddRegexToken('e',    match1to2);                                                                                    // 1309\naddRegexToken('E',    match1to2);                                                                                    // 1310\naddRegexToken('dd',   function (isStrict, locale) {                                                                  // 1311\n    return locale.weekdaysMinRegex(isStrict);                                                                        // 1312\n});                                                                                                                  // 1313\naddRegexToken('ddd',   function (isStrict, locale) {                                                                 // 1314\n    return locale.weekdaysShortRegex(isStrict);                                                                      // 1315\n});                                                                                                                  // 1316\naddRegexToken('dddd',   function (isStrict, locale) {                                                                // 1317\n    return locale.weekdaysRegex(isStrict);                                                                           // 1318\n});                                                                                                                  // 1319\n                                                                                                                     // 1320\naddWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {                                     // 1321\n    var weekday = config._locale.weekdaysParse(input, token, config._strict);                                        // 1322\n    // if we didn't get a weekday name, mark the date as invalid                                                     // 1323\n    if (weekday != null) {                                                                                           // 1324\n        week.d = weekday;                                                                                            // 1325\n    } else {                                                                                                         // 1326\n        getParsingFlags(config).invalidWeekday = input;                                                              // 1327\n    }                                                                                                                // 1328\n});                                                                                                                  // 1329\n                                                                                                                     // 1330\naddWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {                                           // 1331\n    week[token] = toInt(input);                                                                                      // 1332\n});                                                                                                                  // 1333\n                                                                                                                     // 1334\n// HELPERS                                                                                                           // 1335\n                                                                                                                     // 1336\nfunction parseWeekday(input, locale) {                                                                               // 1337\n    if (typeof input !== 'string') {                                                                                 // 1338\n        return input;                                                                                                // 1339\n    }                                                                                                                // 1340\n                                                                                                                     // 1341\n    if (!isNaN(input)) {                                                                                             // 1342\n        return parseInt(input, 10);                                                                                  // 1343\n    }                                                                                                                // 1344\n                                                                                                                     // 1345\n    input = locale.weekdaysParse(input);                                                                             // 1346\n    if (typeof input === 'number') {                                                                                 // 1347\n        return input;                                                                                                // 1348\n    }                                                                                                                // 1349\n                                                                                                                     // 1350\n    return null;                                                                                                     // 1351\n}                                                                                                                    // 1352\n                                                                                                                     // 1353\nfunction parseIsoWeekday(input, locale) {                                                                            // 1354\n    if (typeof input === 'string') {                                                                                 // 1355\n        return locale.weekdaysParse(input) % 7 || 7;                                                                 // 1356\n    }                                                                                                                // 1357\n    return isNaN(input) ? null : input;                                                                              // 1358\n}                                                                                                                    // 1359\n                                                                                                                     // 1360\n// LOCALES                                                                                                           // 1361\n                                                                                                                     // 1362\nvar defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');                   // 1363\nfunction localeWeekdays (m, format) {                                                                                // 1364\n    if (!m) {                                                                                                        // 1365\n        return isArray(this._weekdays) ? this._weekdays :                                                            // 1366\n            this._weekdays['standalone'];                                                                            // 1367\n    }                                                                                                                // 1368\n    return isArray(this._weekdays) ? this._weekdays[m.day()] :                                                       // 1369\n        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];                     // 1370\n}                                                                                                                    // 1371\n                                                                                                                     // 1372\nvar defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');                                           // 1373\nfunction localeWeekdaysShort (m) {                                                                                   // 1374\n    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;                                                 // 1375\n}                                                                                                                    // 1376\n                                                                                                                     // 1377\nvar defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');                                                    // 1378\nfunction localeWeekdaysMin (m) {                                                                                     // 1379\n    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;                                                     // 1380\n}                                                                                                                    // 1381\n                                                                                                                     // 1382\nfunction handleStrictParse$1(weekdayName, format, strict) {                                                          // 1383\n    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();                                                           // 1384\n    if (!this._weekdaysParse) {                                                                                      // 1385\n        this._weekdaysParse = [];                                                                                    // 1386\n        this._shortWeekdaysParse = [];                                                                               // 1387\n        this._minWeekdaysParse = [];                                                                                 // 1388\n                                                                                                                     // 1389\n        for (i = 0; i < 7; ++i) {                                                                                    // 1390\n            mom = createUTC([2000, 1]).day(i);                                                                       // 1391\n            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();                               // 1392\n            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();                           // 1393\n            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();                                     // 1394\n        }                                                                                                            // 1395\n    }                                                                                                                // 1396\n                                                                                                                     // 1397\n    if (strict) {                                                                                                    // 1398\n        if (format === 'dddd') {                                                                                     // 1399\n            ii = indexOf$1.call(this._weekdaysParse, llc);                                                           // 1400\n            return ii !== -1 ? ii : null;                                                                            // 1401\n        } else if (format === 'ddd') {                                                                               // 1402\n            ii = indexOf$1.call(this._shortWeekdaysParse, llc);                                                      // 1403\n            return ii !== -1 ? ii : null;                                                                            // 1404\n        } else {                                                                                                     // 1405\n            ii = indexOf$1.call(this._minWeekdaysParse, llc);                                                        // 1406\n            return ii !== -1 ? ii : null;                                                                            // 1407\n        }                                                                                                            // 1408\n    } else {                                                                                                         // 1409\n        if (format === 'dddd') {                                                                                     // 1410\n            ii = indexOf$1.call(this._weekdaysParse, llc);                                                           // 1411\n            if (ii !== -1) {                                                                                         // 1412\n                return ii;                                                                                           // 1413\n            }                                                                                                        // 1414\n            ii = indexOf$1.call(this._shortWeekdaysParse, llc);                                                      // 1415\n            if (ii !== -1) {                                                                                         // 1416\n                return ii;                                                                                           // 1417\n            }                                                                                                        // 1418\n            ii = indexOf$1.call(this._minWeekdaysParse, llc);                                                        // 1419\n            return ii !== -1 ? ii : null;                                                                            // 1420\n        } else if (format === 'ddd') {                                                                               // 1421\n            ii = indexOf$1.call(this._shortWeekdaysParse, llc);                                                      // 1422\n            if (ii !== -1) {                                                                                         // 1423\n                return ii;                                                                                           // 1424\n            }                                                                                                        // 1425\n            ii = indexOf$1.call(this._weekdaysParse, llc);                                                           // 1426\n            if (ii !== -1) {                                                                                         // 1427\n                return ii;                                                                                           // 1428\n            }                                                                                                        // 1429\n            ii = indexOf$1.call(this._minWeekdaysParse, llc);                                                        // 1430\n            return ii !== -1 ? ii : null;                                                                            // 1431\n        } else {                                                                                                     // 1432\n            ii = indexOf$1.call(this._minWeekdaysParse, llc);                                                        // 1433\n            if (ii !== -1) {                                                                                         // 1434\n                return ii;                                                                                           // 1435\n            }                                                                                                        // 1436\n            ii = indexOf$1.call(this._weekdaysParse, llc);                                                           // 1437\n            if (ii !== -1) {                                                                                         // 1438\n                return ii;                                                                                           // 1439\n            }                                                                                                        // 1440\n            ii = indexOf$1.call(this._shortWeekdaysParse, llc);                                                      // 1441\n            return ii !== -1 ? ii : null;                                                                            // 1442\n        }                                                                                                            // 1443\n    }                                                                                                                // 1444\n}                                                                                                                    // 1445\n                                                                                                                     // 1446\nfunction localeWeekdaysParse (weekdayName, format, strict) {                                                         // 1447\n    var i, mom, regex;                                                                                               // 1448\n                                                                                                                     // 1449\n    if (this._weekdaysParseExact) {                                                                                  // 1450\n        return handleStrictParse$1.call(this, weekdayName, format, strict);                                          // 1451\n    }                                                                                                                // 1452\n                                                                                                                     // 1453\n    if (!this._weekdaysParse) {                                                                                      // 1454\n        this._weekdaysParse = [];                                                                                    // 1455\n        this._minWeekdaysParse = [];                                                                                 // 1456\n        this._shortWeekdaysParse = [];                                                                               // 1457\n        this._fullWeekdaysParse = [];                                                                                // 1458\n    }                                                                                                                // 1459\n                                                                                                                     // 1460\n    for (i = 0; i < 7; i++) {                                                                                        // 1461\n        // make the regex if we don't have it already                                                                // 1462\n                                                                                                                     // 1463\n        mom = createUTC([2000, 1]).day(i);                                                                           // 1464\n        if (strict && !this._fullWeekdaysParse[i]) {                                                                 // 1465\n            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');    // 1466\n            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');\n            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');  // 1468\n        }                                                                                                            // 1469\n        if (!this._weekdaysParse[i]) {                                                                               // 1470\n            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');                                        // 1472\n        }                                                                                                            // 1473\n        // test the regex                                                                                            // 1474\n        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {                           // 1475\n            return i;                                                                                                // 1476\n        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {                    // 1477\n            return i;                                                                                                // 1478\n        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {                       // 1479\n            return i;                                                                                                // 1480\n        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {                                            // 1481\n            return i;                                                                                                // 1482\n        }                                                                                                            // 1483\n    }                                                                                                                // 1484\n}                                                                                                                    // 1485\n                                                                                                                     // 1486\n// MOMENTS                                                                                                           // 1487\n                                                                                                                     // 1488\nfunction getSetDayOfWeek (input) {                                                                                   // 1489\n    if (!this.isValid()) {                                                                                           // 1490\n        return input != null ? this : NaN;                                                                           // 1491\n    }                                                                                                                // 1492\n    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();                                                  // 1493\n    if (input != null) {                                                                                             // 1494\n        input = parseWeekday(input, this.localeData());                                                              // 1495\n        return this.add(input - day, 'd');                                                                           // 1496\n    } else {                                                                                                         // 1497\n        return day;                                                                                                  // 1498\n    }                                                                                                                // 1499\n}                                                                                                                    // 1500\n                                                                                                                     // 1501\nfunction getSetLocaleDayOfWeek (input) {                                                                             // 1502\n    if (!this.isValid()) {                                                                                           // 1503\n        return input != null ? this : NaN;                                                                           // 1504\n    }                                                                                                                // 1505\n    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;                                                // 1506\n    return input == null ? weekday : this.add(input - weekday, 'd');                                                 // 1507\n}                                                                                                                    // 1508\n                                                                                                                     // 1509\nfunction getSetISODayOfWeek (input) {                                                                                // 1510\n    if (!this.isValid()) {                                                                                           // 1511\n        return input != null ? this : NaN;                                                                           // 1512\n    }                                                                                                                // 1513\n                                                                                                                     // 1514\n    // behaves the same as moment#day except                                                                         // 1515\n    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)                                                // 1516\n    // as a setter, sunday should belong to the previous week.                                                       // 1517\n                                                                                                                     // 1518\n    if (input != null) {                                                                                             // 1519\n        var weekday = parseIsoWeekday(input, this.localeData());                                                     // 1520\n        return this.day(this.day() % 7 ? weekday : weekday - 7);                                                     // 1521\n    } else {                                                                                                         // 1522\n        return this.day() || 7;                                                                                      // 1523\n    }                                                                                                                // 1524\n}                                                                                                                    // 1525\n                                                                                                                     // 1526\nvar defaultWeekdaysRegex = matchWord;                                                                                // 1527\nfunction weekdaysRegex (isStrict) {                                                                                  // 1528\n    if (this._weekdaysParseExact) {                                                                                  // 1529\n        if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                   // 1530\n            computeWeekdaysParse.call(this);                                                                         // 1531\n        }                                                                                                            // 1532\n        if (isStrict) {                                                                                              // 1533\n            return this._weekdaysStrictRegex;                                                                        // 1534\n        } else {                                                                                                     // 1535\n            return this._weekdaysRegex;                                                                              // 1536\n        }                                                                                                            // 1537\n    } else {                                                                                                         // 1538\n        if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                   // 1539\n            this._weekdaysRegex = defaultWeekdaysRegex;                                                              // 1540\n        }                                                                                                            // 1541\n        return this._weekdaysStrictRegex && isStrict ?                                                               // 1542\n            this._weekdaysStrictRegex : this._weekdaysRegex;                                                         // 1543\n    }                                                                                                                // 1544\n}                                                                                                                    // 1545\n                                                                                                                     // 1546\nvar defaultWeekdaysShortRegex = matchWord;                                                                           // 1547\nfunction weekdaysShortRegex (isStrict) {                                                                             // 1548\n    if (this._weekdaysParseExact) {                                                                                  // 1549\n        if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                   // 1550\n            computeWeekdaysParse.call(this);                                                                         // 1551\n        }                                                                                                            // 1552\n        if (isStrict) {                                                                                              // 1553\n            return this._weekdaysShortStrictRegex;                                                                   // 1554\n        } else {                                                                                                     // 1555\n            return this._weekdaysShortRegex;                                                                         // 1556\n        }                                                                                                            // 1557\n    } else {                                                                                                         // 1558\n        if (!hasOwnProp(this, '_weekdaysShortRegex')) {                                                              // 1559\n            this._weekdaysShortRegex = defaultWeekdaysShortRegex;                                                    // 1560\n        }                                                                                                            // 1561\n        return this._weekdaysShortStrictRegex && isStrict ?                                                          // 1562\n            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;                                               // 1563\n    }                                                                                                                // 1564\n}                                                                                                                    // 1565\n                                                                                                                     // 1566\nvar defaultWeekdaysMinRegex = matchWord;                                                                             // 1567\nfunction weekdaysMinRegex (isStrict) {                                                                               // 1568\n    if (this._weekdaysParseExact) {                                                                                  // 1569\n        if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                   // 1570\n            computeWeekdaysParse.call(this);                                                                         // 1571\n        }                                                                                                            // 1572\n        if (isStrict) {                                                                                              // 1573\n            return this._weekdaysMinStrictRegex;                                                                     // 1574\n        } else {                                                                                                     // 1575\n            return this._weekdaysMinRegex;                                                                           // 1576\n        }                                                                                                            // 1577\n    } else {                                                                                                         // 1578\n        if (!hasOwnProp(this, '_weekdaysMinRegex')) {                                                                // 1579\n            this._weekdaysMinRegex = defaultWeekdaysMinRegex;                                                        // 1580\n        }                                                                                                            // 1581\n        return this._weekdaysMinStrictRegex && isStrict ?                                                            // 1582\n            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;                                                   // 1583\n    }                                                                                                                // 1584\n}                                                                                                                    // 1585\n                                                                                                                     // 1586\n                                                                                                                     // 1587\nfunction computeWeekdaysParse () {                                                                                   // 1588\n    function cmpLenRev(a, b) {                                                                                       // 1589\n        return b.length - a.length;                                                                                  // 1590\n    }                                                                                                                // 1591\n                                                                                                                     // 1592\n    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],                                         // 1593\n        i, mom, minp, shortp, longp;                                                                                 // 1594\n    for (i = 0; i < 7; i++) {                                                                                        // 1595\n        // make the regex if we don't have it already                                                                // 1596\n        mom = createUTC([2000, 1]).day(i);                                                                           // 1597\n        minp = this.weekdaysMin(mom, '');                                                                            // 1598\n        shortp = this.weekdaysShort(mom, '');                                                                        // 1599\n        longp = this.weekdays(mom, '');                                                                              // 1600\n        minPieces.push(minp);                                                                                        // 1601\n        shortPieces.push(shortp);                                                                                    // 1602\n        longPieces.push(longp);                                                                                      // 1603\n        mixedPieces.push(minp);                                                                                      // 1604\n        mixedPieces.push(shortp);                                                                                    // 1605\n        mixedPieces.push(longp);                                                                                     // 1606\n    }                                                                                                                // 1607\n    // Sorting makes sure if one weekday (or abbr) is a prefix of another it                                         // 1608\n    // will match the longer piece.                                                                                  // 1609\n    minPieces.sort(cmpLenRev);                                                                                       // 1610\n    shortPieces.sort(cmpLenRev);                                                                                     // 1611\n    longPieces.sort(cmpLenRev);                                                                                      // 1612\n    mixedPieces.sort(cmpLenRev);                                                                                     // 1613\n    for (i = 0; i < 7; i++) {                                                                                        // 1614\n        shortPieces[i] = regexEscape(shortPieces[i]);                                                                // 1615\n        longPieces[i] = regexEscape(longPieces[i]);                                                                  // 1616\n        mixedPieces[i] = regexEscape(mixedPieces[i]);                                                                // 1617\n    }                                                                                                                // 1618\n                                                                                                                     // 1619\n    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');                                       // 1620\n    this._weekdaysShortRegex = this._weekdaysRegex;                                                                  // 1621\n    this._weekdaysMinRegex = this._weekdaysRegex;                                                                    // 1622\n                                                                                                                     // 1623\n    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');                                  // 1624\n    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');                            // 1625\n    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');                                // 1626\n}                                                                                                                    // 1627\n                                                                                                                     // 1628\n// FORMATTING                                                                                                        // 1629\n                                                                                                                     // 1630\nfunction hFormat() {                                                                                                 // 1631\n    return this.hours() % 12 || 12;                                                                                  // 1632\n}                                                                                                                    // 1633\n                                                                                                                     // 1634\nfunction kFormat() {                                                                                                 // 1635\n    return this.hours() || 24;                                                                                       // 1636\n}                                                                                                                    // 1637\n                                                                                                                     // 1638\naddFormatToken('H', ['HH', 2], 0, 'hour');                                                                           // 1639\naddFormatToken('h', ['hh', 2], 0, hFormat);                                                                          // 1640\naddFormatToken('k', ['kk', 2], 0, kFormat);                                                                          // 1641\n                                                                                                                     // 1642\naddFormatToken('hmm', 0, 0, function () {                                                                            // 1643\n    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);                                                   // 1644\n});                                                                                                                  // 1645\n                                                                                                                     // 1646\naddFormatToken('hmmss', 0, 0, function () {                                                                          // 1647\n    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +                                                  // 1648\n        zeroFill(this.seconds(), 2);                                                                                 // 1649\n});                                                                                                                  // 1650\n                                                                                                                     // 1651\naddFormatToken('Hmm', 0, 0, function () {                                                                            // 1652\n    return '' + this.hours() + zeroFill(this.minutes(), 2);                                                          // 1653\n});                                                                                                                  // 1654\n                                                                                                                     // 1655\naddFormatToken('Hmmss', 0, 0, function () {                                                                          // 1656\n    return '' + this.hours() + zeroFill(this.minutes(), 2) +                                                         // 1657\n        zeroFill(this.seconds(), 2);                                                                                 // 1658\n});                                                                                                                  // 1659\n                                                                                                                     // 1660\nfunction meridiem (token, lowercase) {                                                                               // 1661\n    addFormatToken(token, 0, 0, function () {                                                                        // 1662\n        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);                                  // 1663\n    });                                                                                                              // 1664\n}                                                                                                                    // 1665\n                                                                                                                     // 1666\nmeridiem('a', true);                                                                                                 // 1667\nmeridiem('A', false);                                                                                                // 1668\n                                                                                                                     // 1669\n// ALIASES                                                                                                           // 1670\n                                                                                                                     // 1671\naddUnitAlias('hour', 'h');                                                                                           // 1672\n                                                                                                                     // 1673\n// PRIORITY                                                                                                          // 1674\naddUnitPriority('hour', 13);                                                                                         // 1675\n                                                                                                                     // 1676\n// PARSING                                                                                                           // 1677\n                                                                                                                     // 1678\nfunction matchMeridiem (isStrict, locale) {                                                                          // 1679\n    return locale._meridiemParse;                                                                                    // 1680\n}                                                                                                                    // 1681\n                                                                                                                     // 1682\naddRegexToken('a',  matchMeridiem);                                                                                  // 1683\naddRegexToken('A',  matchMeridiem);                                                                                  // 1684\naddRegexToken('H',  match1to2);                                                                                      // 1685\naddRegexToken('h',  match1to2);                                                                                      // 1686\naddRegexToken('k',  match1to2);                                                                                      // 1687\naddRegexToken('HH', match1to2, match2);                                                                              // 1688\naddRegexToken('hh', match1to2, match2);                                                                              // 1689\naddRegexToken('kk', match1to2, match2);                                                                              // 1690\n                                                                                                                     // 1691\naddRegexToken('hmm', match3to4);                                                                                     // 1692\naddRegexToken('hmmss', match5to6);                                                                                   // 1693\naddRegexToken('Hmm', match3to4);                                                                                     // 1694\naddRegexToken('Hmmss', match5to6);                                                                                   // 1695\n                                                                                                                     // 1696\naddParseToken(['H', 'HH'], HOUR);                                                                                    // 1697\naddParseToken(['k', 'kk'], function (input, array, config) {                                                         // 1698\n    var kInput = toInt(input);                                                                                       // 1699\n    array[HOUR] = kInput === 24 ? 0 : kInput;                                                                        // 1700\n});                                                                                                                  // 1701\naddParseToken(['a', 'A'], function (input, array, config) {                                                          // 1702\n    config._isPm = config._locale.isPM(input);                                                                       // 1703\n    config._meridiem = input;                                                                                        // 1704\n});                                                                                                                  // 1705\naddParseToken(['h', 'hh'], function (input, array, config) {                                                         // 1706\n    array[HOUR] = toInt(input);                                                                                      // 1707\n    getParsingFlags(config).bigHour = true;                                                                          // 1708\n});                                                                                                                  // 1709\naddParseToken('hmm', function (input, array, config) {                                                               // 1710\n    var pos = input.length - 2;                                                                                      // 1711\n    array[HOUR] = toInt(input.substr(0, pos));                                                                       // 1712\n    array[MINUTE] = toInt(input.substr(pos));                                                                        // 1713\n    getParsingFlags(config).bigHour = true;                                                                          // 1714\n});                                                                                                                  // 1715\naddParseToken('hmmss', function (input, array, config) {                                                             // 1716\n    var pos1 = input.length - 4;                                                                                     // 1717\n    var pos2 = input.length - 2;                                                                                     // 1718\n    array[HOUR] = toInt(input.substr(0, pos1));                                                                      // 1719\n    array[MINUTE] = toInt(input.substr(pos1, 2));                                                                    // 1720\n    array[SECOND] = toInt(input.substr(pos2));                                                                       // 1721\n    getParsingFlags(config).bigHour = true;                                                                          // 1722\n});                                                                                                                  // 1723\naddParseToken('Hmm', function (input, array, config) {                                                               // 1724\n    var pos = input.length - 2;                                                                                      // 1725\n    array[HOUR] = toInt(input.substr(0, pos));                                                                       // 1726\n    array[MINUTE] = toInt(input.substr(pos));                                                                        // 1727\n});                                                                                                                  // 1728\naddParseToken('Hmmss', function (input, array, config) {                                                             // 1729\n    var pos1 = input.length - 4;                                                                                     // 1730\n    var pos2 = input.length - 2;                                                                                     // 1731\n    array[HOUR] = toInt(input.substr(0, pos1));                                                                      // 1732\n    array[MINUTE] = toInt(input.substr(pos1, 2));                                                                    // 1733\n    array[SECOND] = toInt(input.substr(pos2));                                                                       // 1734\n});                                                                                                                  // 1735\n                                                                                                                     // 1736\n// LOCALES                                                                                                           // 1737\n                                                                                                                     // 1738\nfunction localeIsPM (input) {                                                                                        // 1739\n    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays                               // 1740\n    // Using charAt should be more compatible.                                                                       // 1741\n    return ((input + '').toLowerCase().charAt(0) === 'p');                                                           // 1742\n}                                                                                                                    // 1743\n                                                                                                                     // 1744\nvar defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;                                                                    // 1745\nfunction localeMeridiem (hours, minutes, isLower) {                                                                  // 1746\n    if (hours > 11) {                                                                                                // 1747\n        return isLower ? 'pm' : 'PM';                                                                                // 1748\n    } else {                                                                                                         // 1749\n        return isLower ? 'am' : 'AM';                                                                                // 1750\n    }                                                                                                                // 1751\n}                                                                                                                    // 1752\n                                                                                                                     // 1753\n                                                                                                                     // 1754\n// MOMENTS                                                                                                           // 1755\n                                                                                                                     // 1756\n// Setting the hour should keep the time, because the user explicitly                                                // 1757\n// specified which hour he wants. So trying to maintain the same hour (in                                            // 1758\n// a new timezone) makes sense. Adding/subtracting hours does not follow                                             // 1759\n// this rule.                                                                                                        // 1760\nvar getSetHour = makeGetSet('Hours', true);                                                                          // 1761\n                                                                                                                     // 1762\n// months                                                                                                            // 1763\n// week                                                                                                              // 1764\n// weekdays                                                                                                          // 1765\n// meridiem                                                                                                          // 1766\nvar baseConfig = {                                                                                                   // 1767\n    calendar: defaultCalendar,                                                                                       // 1768\n    longDateFormat: defaultLongDateFormat,                                                                           // 1769\n    invalidDate: defaultInvalidDate,                                                                                 // 1770\n    ordinal: defaultOrdinal,                                                                                         // 1771\n    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,                                                           // 1772\n    relativeTime: defaultRelativeTime,                                                                               // 1773\n                                                                                                                     // 1774\n    months: defaultLocaleMonths,                                                                                     // 1775\n    monthsShort: defaultLocaleMonthsShort,                                                                           // 1776\n                                                                                                                     // 1777\n    week: defaultLocaleWeek,                                                                                         // 1778\n                                                                                                                     // 1779\n    weekdays: defaultLocaleWeekdays,                                                                                 // 1780\n    weekdaysMin: defaultLocaleWeekdaysMin,                                                                           // 1781\n    weekdaysShort: defaultLocaleWeekdaysShort,                                                                       // 1782\n                                                                                                                     // 1783\n    meridiemParse: defaultLocaleMeridiemParse                                                                        // 1784\n};                                                                                                                   // 1785\n                                                                                                                     // 1786\n// internal storage for locale config files                                                                          // 1787\nvar locales = {};                                                                                                    // 1788\nvar localeFamilies = {};                                                                                             // 1789\nvar globalLocale;                                                                                                    // 1790\n                                                                                                                     // 1791\nfunction normalizeLocale(key) {                                                                                      // 1792\n    return key ? key.toLowerCase().replace('_', '-') : key;                                                          // 1793\n}                                                                                                                    // 1794\n                                                                                                                     // 1795\n// pick the locale from the array                                                                                    // 1796\n// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each                         // 1797\n// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\nfunction chooseLocale(names) {                                                                                       // 1799\n    var i = 0, j, next, locale, split;                                                                               // 1800\n                                                                                                                     // 1801\n    while (i < names.length) {                                                                                       // 1802\n        split = normalizeLocale(names[i]).split('-');                                                                // 1803\n        j = split.length;                                                                                            // 1804\n        next = normalizeLocale(names[i + 1]);                                                                        // 1805\n        next = next ? next.split('-') : null;                                                                        // 1806\n        while (j > 0) {                                                                                              // 1807\n            locale = loadLocale(split.slice(0, j).join('-'));                                                        // 1808\n            if (locale) {                                                                                            // 1809\n                return locale;                                                                                       // 1810\n            }                                                                                                        // 1811\n            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {                             // 1812\n                //the next array item is better than a shallower substring of this one                               // 1813\n                break;                                                                                               // 1814\n            }                                                                                                        // 1815\n            j--;                                                                                                     // 1816\n        }                                                                                                            // 1817\n        i++;                                                                                                         // 1818\n    }                                                                                                                // 1819\n    return null;                                                                                                     // 1820\n}                                                                                                                    // 1821\n                                                                                                                     // 1822\nfunction loadLocale(name) {                                                                                          // 1823\n    var oldLocale = null;                                                                                            // 1824\n    // TODO: Find a better way to register and load all the locales in Node                                          // 1825\n    if (!locales[name] && (typeof module !== 'undefined') &&                                                         // 1826\n            module && module.exports) {                                                                              // 1827\n        try {                                                                                                        // 1828\n            oldLocale = globalLocale._abbr;                                                                          // 1829\n            require('./locale/' + name);                                                                             // 1830\n            // because defineLocale currently also sets the global locale, we                                        // 1831\n            // want to undo that for lazy loaded locales                                                             // 1832\n            getSetGlobalLocale(oldLocale);                                                                           // 1833\n        } catch (e) { }                                                                                              // 1834\n    }                                                                                                                // 1835\n    return locales[name];                                                                                            // 1836\n}                                                                                                                    // 1837\n                                                                                                                     // 1838\n// This function will load locale and then set the global locale.  If                                                // 1839\n// no arguments are passed in, it will simply return the current global                                              // 1840\n// locale key.                                                                                                       // 1841\nfunction getSetGlobalLocale (key, values) {                                                                          // 1842\n    var data;                                                                                                        // 1843\n    if (key) {                                                                                                       // 1844\n        if (isUndefined(values)) {                                                                                   // 1845\n            data = getLocale(key);                                                                                   // 1846\n        }                                                                                                            // 1847\n        else {                                                                                                       // 1848\n            data = defineLocale(key, values);                                                                        // 1849\n        }                                                                                                            // 1850\n                                                                                                                     // 1851\n        if (data) {                                                                                                  // 1852\n            // moment.duration._locale = moment._locale = data;                                                      // 1853\n            globalLocale = data;                                                                                     // 1854\n        }                                                                                                            // 1855\n    }                                                                                                                // 1856\n                                                                                                                     // 1857\n    return globalLocale._abbr;                                                                                       // 1858\n}                                                                                                                    // 1859\n                                                                                                                     // 1860\nfunction defineLocale (name, config) {                                                                               // 1861\n    if (config !== null) {                                                                                           // 1862\n        var parentConfig = baseConfig;                                                                               // 1863\n        config.abbr = name;                                                                                          // 1864\n        if (locales[name] != null) {                                                                                 // 1865\n            deprecateSimple('defineLocaleOverride',                                                                  // 1866\n                    'use moment.updateLocale(localeName, config) to change ' +                                       // 1867\n                    'an existing locale. moment.defineLocale(localeName, ' +                                         // 1868\n                    'config) should only be used for creating a new locale ' +                                       // 1869\n                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');                      // 1870\n            parentConfig = locales[name]._config;                                                                    // 1871\n        } else if (config.parentLocale != null) {                                                                    // 1872\n            if (locales[config.parentLocale] != null) {                                                              // 1873\n                parentConfig = locales[config.parentLocale]._config;                                                 // 1874\n            } else {                                                                                                 // 1875\n                if (!localeFamilies[config.parentLocale]) {                                                          // 1876\n                    localeFamilies[config.parentLocale] = [];                                                        // 1877\n                }                                                                                                    // 1878\n                localeFamilies[config.parentLocale].push({                                                           // 1879\n                    name: name,                                                                                      // 1880\n                    config: config                                                                                   // 1881\n                });                                                                                                  // 1882\n                return null;                                                                                         // 1883\n            }                                                                                                        // 1884\n        }                                                                                                            // 1885\n        locales[name] = new Locale(mergeConfigs(parentConfig, config));                                              // 1886\n                                                                                                                     // 1887\n        if (localeFamilies[name]) {                                                                                  // 1888\n            localeFamilies[name].forEach(function (x) {                                                              // 1889\n                defineLocale(x.name, x.config);                                                                      // 1890\n            });                                                                                                      // 1891\n        }                                                                                                            // 1892\n                                                                                                                     // 1893\n        // backwards compat for now: also set the locale                                                             // 1894\n        // make sure we set the locale AFTER all child locales have been                                             // 1895\n        // created, so we won't end up with the child locale set.                                                    // 1896\n        getSetGlobalLocale(name);                                                                                    // 1897\n                                                                                                                     // 1898\n                                                                                                                     // 1899\n        return locales[name];                                                                                        // 1900\n    } else {                                                                                                         // 1901\n        // useful for testing                                                                                        // 1902\n        delete locales[name];                                                                                        // 1903\n        return null;                                                                                                 // 1904\n    }                                                                                                                // 1905\n}                                                                                                                    // 1906\n                                                                                                                     // 1907\nfunction updateLocale(name, config) {                                                                                // 1908\n    if (config != null) {                                                                                            // 1909\n        var locale, parentConfig = baseConfig;                                                                       // 1910\n        // MERGE                                                                                                     // 1911\n        if (locales[name] != null) {                                                                                 // 1912\n            parentConfig = locales[name]._config;                                                                    // 1913\n        }                                                                                                            // 1914\n        config = mergeConfigs(parentConfig, config);                                                                 // 1915\n        locale = new Locale(config);                                                                                 // 1916\n        locale.parentLocale = locales[name];                                                                         // 1917\n        locales[name] = locale;                                                                                      // 1918\n                                                                                                                     // 1919\n        // backwards compat for now: also set the locale                                                             // 1920\n        getSetGlobalLocale(name);                                                                                    // 1921\n    } else {                                                                                                         // 1922\n        // pass null for config to unupdate, useful for tests                                                        // 1923\n        if (locales[name] != null) {                                                                                 // 1924\n            if (locales[name].parentLocale != null) {                                                                // 1925\n                locales[name] = locales[name].parentLocale;                                                          // 1926\n            } else if (locales[name] != null) {                                                                      // 1927\n                delete locales[name];                                                                                // 1928\n            }                                                                                                        // 1929\n        }                                                                                                            // 1930\n    }                                                                                                                // 1931\n    return locales[name];                                                                                            // 1932\n}                                                                                                                    // 1933\n                                                                                                                     // 1934\n// returns locale data                                                                                               // 1935\nfunction getLocale (key) {                                                                                           // 1936\n    var locale;                                                                                                      // 1937\n                                                                                                                     // 1938\n    if (key && key._locale && key._locale._abbr) {                                                                   // 1939\n        key = key._locale._abbr;                                                                                     // 1940\n    }                                                                                                                // 1941\n                                                                                                                     // 1942\n    if (!key) {                                                                                                      // 1943\n        return globalLocale;                                                                                         // 1944\n    }                                                                                                                // 1945\n                                                                                                                     // 1946\n    if (!isArray(key)) {                                                                                             // 1947\n        //short-circuit everything else                                                                              // 1948\n        locale = loadLocale(key);                                                                                    // 1949\n        if (locale) {                                                                                                // 1950\n            return locale;                                                                                           // 1951\n        }                                                                                                            // 1952\n        key = [key];                                                                                                 // 1953\n    }                                                                                                                // 1954\n                                                                                                                     // 1955\n    return chooseLocale(key);                                                                                        // 1956\n}                                                                                                                    // 1957\n                                                                                                                     // 1958\nfunction listLocales() {                                                                                             // 1959\n    return keys$1(locales);                                                                                          // 1960\n}                                                                                                                    // 1961\n                                                                                                                     // 1962\nfunction checkOverflow (m) {                                                                                         // 1963\n    var overflow;                                                                                                    // 1964\n    var a = m._a;                                                                                                    // 1965\n                                                                                                                     // 1966\n    if (a && getParsingFlags(m).overflow === -2) {                                                                   // 1967\n        overflow =                                                                                                   // 1968\n            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :                                                     // 1969\n            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :                           // 1970\n            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :                                                    // 1972\n            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :                                                    // 1973\n            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :                                               // 1974\n            -1;                                                                                                      // 1975\n                                                                                                                     // 1976\n        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {                         // 1977\n            overflow = DATE;                                                                                         // 1978\n        }                                                                                                            // 1979\n        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {                                                  // 1980\n            overflow = WEEK;                                                                                         // 1981\n        }                                                                                                            // 1982\n        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {                                                // 1983\n            overflow = WEEKDAY;                                                                                      // 1984\n        }                                                                                                            // 1985\n                                                                                                                     // 1986\n        getParsingFlags(m).overflow = overflow;                                                                      // 1987\n    }                                                                                                                // 1988\n                                                                                                                     // 1989\n    return m;                                                                                                        // 1990\n}                                                                                                                    // 1991\n                                                                                                                     // 1992\n// iso 8601 regex                                                                                                    // 1993\n// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)         // 1994\nvar extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\nvar basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n                                                                                                                     // 1997\nvar tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;                                                                               // 1998\n                                                                                                                     // 1999\nvar isoDates = [                                                                                                     // 2000\n    ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],                                                                         // 2001\n    ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],                                                                               // 2002\n    ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],                                                                              // 2003\n    ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],                                                                            // 2004\n    ['YYYY-DDD', /\\d{4}-\\d{3}/],                                                                                     // 2005\n    ['YYYY-MM', /\\d{4}-\\d\\d/, false],                                                                                // 2006\n    ['YYYYYYMMDD', /[+-]\\d{10}/],                                                                                    // 2007\n    ['YYYYMMDD', /\\d{8}/],                                                                                           // 2008\n    // YYYYMM is NOT allowed by the standard                                                                         // 2009\n    ['GGGG[W]WWE', /\\d{4}W\\d{3}/],                                                                                   // 2010\n    ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],                                                                             // 2011\n    ['YYYYDDD', /\\d{7}/]                                                                                             // 2012\n];                                                                                                                   // 2013\n                                                                                                                     // 2014\n// iso time formats and regexes                                                                                      // 2015\nvar isoTimes = [                                                                                                     // 2016\n    ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],                                                                        // 2017\n    ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],                                                                         // 2018\n    ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],                                                                                  // 2019\n    ['HH:mm', /\\d\\d:\\d\\d/],                                                                                          // 2020\n    ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],                                                                            // 2021\n    ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],                                                                             // 2022\n    ['HHmmss', /\\d\\d\\d\\d\\d\\d/],                                                                                      // 2023\n    ['HHmm', /\\d\\d\\d\\d/],                                                                                            // 2024\n    ['HH', /\\d\\d/]                                                                                                   // 2025\n];                                                                                                                   // 2026\n                                                                                                                     // 2027\nvar aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;                                                                         // 2028\n                                                                                                                     // 2029\n// date from iso format                                                                                              // 2030\nfunction configFromISO(config) {                                                                                     // 2031\n    var i, l,                                                                                                        // 2032\n        string = config._i,                                                                                          // 2033\n        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),                                         // 2034\n        allowTime, dateFormat, timeFormat, tzFormat;                                                                 // 2035\n                                                                                                                     // 2036\n    if (match) {                                                                                                     // 2037\n        getParsingFlags(config).iso = true;                                                                          // 2038\n                                                                                                                     // 2039\n        for (i = 0, l = isoDates.length; i < l; i++) {                                                               // 2040\n            if (isoDates[i][1].exec(match[1])) {                                                                     // 2041\n                dateFormat = isoDates[i][0];                                                                         // 2042\n                allowTime = isoDates[i][2] !== false;                                                                // 2043\n                break;                                                                                               // 2044\n            }                                                                                                        // 2045\n        }                                                                                                            // 2046\n        if (dateFormat == null) {                                                                                    // 2047\n            config._isValid = false;                                                                                 // 2048\n            return;                                                                                                  // 2049\n        }                                                                                                            // 2050\n        if (match[3]) {                                                                                              // 2051\n            for (i = 0, l = isoTimes.length; i < l; i++) {                                                           // 2052\n                if (isoTimes[i][1].exec(match[3])) {                                                                 // 2053\n                    // match[2] should be 'T' or space                                                               // 2054\n                    timeFormat = (match[2] || ' ') + isoTimes[i][0];                                                 // 2055\n                    break;                                                                                           // 2056\n                }                                                                                                    // 2057\n            }                                                                                                        // 2058\n            if (timeFormat == null) {                                                                                // 2059\n                config._isValid = false;                                                                             // 2060\n                return;                                                                                              // 2061\n            }                                                                                                        // 2062\n        }                                                                                                            // 2063\n        if (!allowTime && timeFormat != null) {                                                                      // 2064\n            config._isValid = false;                                                                                 // 2065\n            return;                                                                                                  // 2066\n        }                                                                                                            // 2067\n        if (match[4]) {                                                                                              // 2068\n            if (tzRegex.exec(match[4])) {                                                                            // 2069\n                tzFormat = 'Z';                                                                                      // 2070\n            } else {                                                                                                 // 2071\n                config._isValid = false;                                                                             // 2072\n                return;                                                                                              // 2073\n            }                                                                                                        // 2074\n        }                                                                                                            // 2075\n        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');                                              // 2076\n        configFromStringAndFormat(config);                                                                           // 2077\n    } else {                                                                                                         // 2078\n        config._isValid = false;                                                                                     // 2079\n    }                                                                                                                // 2080\n}                                                                                                                    // 2081\n                                                                                                                     // 2082\n// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3                                   // 2083\nvar basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d?\\d\\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(?:\\d\\d)?\\d\\d\\s)(\\d\\d:\\d\\d)(\\:\\d\\d)?(\\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\\d{4}))$/;\n                                                                                                                     // 2085\n// date and time from ref 2822 format                                                                                // 2086\nfunction configFromRFC2822(config) {                                                                                 // 2087\n    var string, match, dayFormat,                                                                                    // 2088\n        dateFormat, timeFormat, tzFormat;                                                                            // 2089\n    var timezones = {                                                                                                // 2090\n        ' GMT': ' +0000',                                                                                            // 2091\n        ' EDT': ' -0400',                                                                                            // 2092\n        ' EST': ' -0500',                                                                                            // 2093\n        ' CDT': ' -0500',                                                                                            // 2094\n        ' CST': ' -0600',                                                                                            // 2095\n        ' MDT': ' -0600',                                                                                            // 2096\n        ' MST': ' -0700',                                                                                            // 2097\n        ' PDT': ' -0700',                                                                                            // 2098\n        ' PST': ' -0800'                                                                                             // 2099\n    };                                                                                                               // 2100\n    var military = 'YXWVUTSRQPONZABCDEFGHIKLM';                                                                      // 2101\n    var timezone, timezoneIndex;                                                                                     // 2102\n                                                                                                                     // 2103\n    string = config._i                                                                                               // 2104\n        .replace(/\\([^\\)]*\\)|[\\n\\t]/g, ' ') // Remove comments and folding whitespace                                // 2105\n        .replace(/(\\s\\s+)/g, ' ') // Replace multiple-spaces with a single space                                     // 2106\n        .replace(/^\\s|\\s$/g, ''); // Remove leading and trailing spaces                                              // 2107\n    match = basicRfcRegex.exec(string);                                                                              // 2108\n                                                                                                                     // 2109\n    if (match) {                                                                                                     // 2110\n        dayFormat = match[1] ? 'ddd' + ((match[1].length === 5) ? ', ' : ' ') : '';                                  // 2111\n        dateFormat = 'D MMM ' + ((match[2].length > 10) ? 'YYYY ' : 'YY ');                                          // 2112\n        timeFormat = 'HH:mm' + (match[4] ? ':ss' : '');                                                              // 2113\n                                                                                                                     // 2114\n        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.                           // 2115\n        if (match[1]) { // day of week given                                                                         // 2116\n            var momentDate = new Date(match[2]);                                                                     // 2117\n            var momentDay = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'][momentDate.getDay()];                        // 2118\n                                                                                                                     // 2119\n            if (match[1].substr(0,3) !== momentDay) {                                                                // 2120\n                getParsingFlags(config).weekdayMismatch = true;                                                      // 2121\n                config._isValid = false;                                                                             // 2122\n                return;                                                                                              // 2123\n            }                                                                                                        // 2124\n        }                                                                                                            // 2125\n                                                                                                                     // 2126\n        switch (match[5].length) {                                                                                   // 2127\n            case 2: // military                                                                                      // 2128\n                if (timezoneIndex === 0) {                                                                           // 2129\n                    timezone = ' +0000';                                                                             // 2130\n                } else {                                                                                             // 2131\n                    timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12;                                // 2132\n                    timezone = ((timezoneIndex < 0) ? ' -' : ' +') +                                                 // 2133\n                        (('' + timezoneIndex).replace(/^-?/, '0')).match(/..$/)[0] + '00';                           // 2134\n                }                                                                                                    // 2135\n                break;                                                                                               // 2136\n            case 4: // Zone                                                                                          // 2137\n                timezone = timezones[match[5]];                                                                      // 2138\n                break;                                                                                               // 2139\n            default: // UT or +/-9999                                                                                // 2140\n                timezone = timezones[' GMT'];                                                                        // 2141\n        }                                                                                                            // 2142\n        match[5] = timezone;                                                                                         // 2143\n        config._i = match.splice(1).join('');                                                                        // 2144\n        tzFormat = ' ZZ';                                                                                            // 2145\n        config._f = dayFormat + dateFormat + timeFormat + tzFormat;                                                  // 2146\n        configFromStringAndFormat(config);                                                                           // 2147\n        getParsingFlags(config).rfc2822 = true;                                                                      // 2148\n    } else {                                                                                                         // 2149\n        config._isValid = false;                                                                                     // 2150\n    }                                                                                                                // 2151\n}                                                                                                                    // 2152\n                                                                                                                     // 2153\n// date from iso format or fallback                                                                                  // 2154\nfunction configFromString(config) {                                                                                  // 2155\n    var matched = aspNetJsonRegex.exec(config._i);                                                                   // 2156\n                                                                                                                     // 2157\n    if (matched !== null) {                                                                                          // 2158\n        config._d = new Date(+matched[1]);                                                                           // 2159\n        return;                                                                                                      // 2160\n    }                                                                                                                // 2161\n                                                                                                                     // 2162\n    configFromISO(config);                                                                                           // 2163\n    if (config._isValid === false) {                                                                                 // 2164\n        delete config._isValid;                                                                                      // 2165\n    } else {                                                                                                         // 2166\n        return;                                                                                                      // 2167\n    }                                                                                                                // 2168\n                                                                                                                     // 2169\n    configFromRFC2822(config);                                                                                       // 2170\n    if (config._isValid === false) {                                                                                 // 2171\n        delete config._isValid;                                                                                      // 2172\n    } else {                                                                                                         // 2173\n        return;                                                                                                      // 2174\n    }                                                                                                                // 2175\n                                                                                                                     // 2176\n    // Final attempt, use Input Fallback                                                                             // 2177\n    hooks.createFromInputFallback(config);                                                                           // 2178\n}                                                                                                                    // 2179\n                                                                                                                     // 2180\nhooks.createFromInputFallback = deprecate(                                                                           // 2181\n    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +   // 2182\n    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +                    // 2183\n    'discouraged and will be removed in an upcoming major release. Please refer to ' +                               // 2184\n    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',                                                 // 2185\n    function (config) {                                                                                              // 2186\n        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));                                            // 2187\n    }                                                                                                                // 2188\n);                                                                                                                   // 2189\n                                                                                                                     // 2190\n// Pick the first defined of two or three arguments.                                                                 // 2191\nfunction defaults(a, b, c) {                                                                                         // 2192\n    if (a != null) {                                                                                                 // 2193\n        return a;                                                                                                    // 2194\n    }                                                                                                                // 2195\n    if (b != null) {                                                                                                 // 2196\n        return b;                                                                                                    // 2197\n    }                                                                                                                // 2198\n    return c;                                                                                                        // 2199\n}                                                                                                                    // 2200\n                                                                                                                     // 2201\nfunction currentDateArray(config) {                                                                                  // 2202\n    // hooks is actually the exported moment object                                                                  // 2203\n    var nowValue = new Date(hooks.now());                                                                            // 2204\n    if (config._useUTC) {                                                                                            // 2205\n        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];                           // 2206\n    }                                                                                                                // 2207\n    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];                                        // 2208\n}                                                                                                                    // 2209\n                                                                                                                     // 2210\n// convert an array to a date.                                                                                       // 2211\n// the array should mirror the parameters below                                                                      // 2212\n// note: all values past the year are optional and will default to the lowest possible value.                        // 2213\n// [year, month, day , hour, minute, second, millisecond]                                                            // 2214\nfunction configFromArray (config) {                                                                                  // 2215\n    var i, date, input = [], currentDate, yearToUse;                                                                 // 2216\n                                                                                                                     // 2217\n    if (config._d) {                                                                                                 // 2218\n        return;                                                                                                      // 2219\n    }                                                                                                                // 2220\n                                                                                                                     // 2221\n    currentDate = currentDateArray(config);                                                                          // 2222\n                                                                                                                     // 2223\n    //compute day of the year from weeks and weekdays                                                                // 2224\n    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {                                          // 2225\n        dayOfYearFromWeekInfo(config);                                                                               // 2226\n    }                                                                                                                // 2227\n                                                                                                                     // 2228\n    //if the day of the year is set, figure out what it is                                                           // 2229\n    if (config._dayOfYear != null) {                                                                                 // 2230\n        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);                                                    // 2231\n                                                                                                                     // 2232\n        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {                                  // 2233\n            getParsingFlags(config)._overflowDayOfYear = true;                                                       // 2234\n        }                                                                                                            // 2235\n                                                                                                                     // 2236\n        date = createUTCDate(yearToUse, 0, config._dayOfYear);                                                       // 2237\n        config._a[MONTH] = date.getUTCMonth();                                                                       // 2238\n        config._a[DATE] = date.getUTCDate();                                                                         // 2239\n    }                                                                                                                // 2240\n                                                                                                                     // 2241\n    // Default to current date.                                                                                      // 2242\n    // * if no year, month, day of month are given, default to today                                                 // 2243\n    // * if day of month is given, default month and year                                                            // 2244\n    // * if month is given, default only year                                                                        // 2245\n    // * if year is given, don't default anything                                                                    // 2246\n    for (i = 0; i < 3 && config._a[i] == null; ++i) {                                                                // 2247\n        config._a[i] = input[i] = currentDate[i];                                                                    // 2248\n    }                                                                                                                // 2249\n                                                                                                                     // 2250\n    // Zero out whatever was not defaulted, including time                                                           // 2251\n    for (; i < 7; i++) {                                                                                             // 2252\n        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];                         // 2253\n    }                                                                                                                // 2254\n                                                                                                                     // 2255\n    // Check for 24:00:00.000                                                                                        // 2256\n    if (config._a[HOUR] === 24 &&                                                                                    // 2257\n            config._a[MINUTE] === 0 &&                                                                               // 2258\n            config._a[SECOND] === 0 &&                                                                               // 2259\n            config._a[MILLISECOND] === 0) {                                                                          // 2260\n        config._nextDay = true;                                                                                      // 2261\n        config._a[HOUR] = 0;                                                                                         // 2262\n    }                                                                                                                // 2263\n                                                                                                                     // 2264\n    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);                                    // 2265\n    // Apply timezone offset from input. The actual utcOffset can be changed                                         // 2266\n    // with parseZone.                                                                                               // 2267\n    if (config._tzm != null) {                                                                                       // 2268\n        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);                                            // 2269\n    }                                                                                                                // 2270\n                                                                                                                     // 2271\n    if (config._nextDay) {                                                                                           // 2272\n        config._a[HOUR] = 24;                                                                                        // 2273\n    }                                                                                                                // 2274\n}                                                                                                                    // 2275\n                                                                                                                     // 2276\nfunction dayOfYearFromWeekInfo(config) {                                                                             // 2277\n    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;                                                 // 2278\n                                                                                                                     // 2279\n    w = config._w;                                                                                                   // 2280\n    if (w.GG != null || w.W != null || w.E != null) {                                                                // 2281\n        dow = 1;                                                                                                     // 2282\n        doy = 4;                                                                                                     // 2283\n                                                                                                                     // 2284\n        // TODO: We need to take the current isoWeekYear, but that depends on                                        // 2285\n        // how we interpret now (local, utc, fixed offset). So create                                                // 2286\n        // a now version of current config (take local/utc/offset flags, and                                         // 2287\n        // create now).                                                                                              // 2288\n        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);                            // 2289\n        week = defaults(w.W, 1);                                                                                     // 2290\n        weekday = defaults(w.E, 1);                                                                                  // 2291\n        if (weekday < 1 || weekday > 7) {                                                                            // 2292\n            weekdayOverflow = true;                                                                                  // 2293\n        }                                                                                                            // 2294\n    } else {                                                                                                         // 2295\n        dow = config._locale._week.dow;                                                                              // 2296\n        doy = config._locale._week.doy;                                                                              // 2297\n                                                                                                                     // 2298\n        var curWeek = weekOfYear(createLocal(), dow, doy);                                                           // 2299\n                                                                                                                     // 2300\n        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);                                                    // 2301\n                                                                                                                     // 2302\n        // Default to current week.                                                                                  // 2303\n        week = defaults(w.w, curWeek.week);                                                                          // 2304\n                                                                                                                     // 2305\n        if (w.d != null) {                                                                                           // 2306\n            // weekday -- low day numbers are considered next week                                                   // 2307\n            weekday = w.d;                                                                                           // 2308\n            if (weekday < 0 || weekday > 6) {                                                                        // 2309\n                weekdayOverflow = true;                                                                              // 2310\n            }                                                                                                        // 2311\n        } else if (w.e != null) {                                                                                    // 2312\n            // local weekday -- counting starts from begining of week                                                // 2313\n            weekday = w.e + dow;                                                                                     // 2314\n            if (w.e < 0 || w.e > 6) {                                                                                // 2315\n                weekdayOverflow = true;                                                                              // 2316\n            }                                                                                                        // 2317\n        } else {                                                                                                     // 2318\n            // default to begining of week                                                                           // 2319\n            weekday = dow;                                                                                           // 2320\n        }                                                                                                            // 2321\n    }                                                                                                                // 2322\n    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {                                                        // 2323\n        getParsingFlags(config)._overflowWeeks = true;                                                               // 2324\n    } else if (weekdayOverflow != null) {                                                                            // 2325\n        getParsingFlags(config)._overflowWeekday = true;                                                             // 2326\n    } else {                                                                                                         // 2327\n        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);                                                // 2328\n        config._a[YEAR] = temp.year;                                                                                 // 2329\n        config._dayOfYear = temp.dayOfYear;                                                                          // 2330\n    }                                                                                                                // 2331\n}                                                                                                                    // 2332\n                                                                                                                     // 2333\n// constant that refers to the ISO standard                                                                          // 2334\nhooks.ISO_8601 = function () {};                                                                                     // 2335\n                                                                                                                     // 2336\n// constant that refers to the RFC 2822 form                                                                         // 2337\nhooks.RFC_2822 = function () {};                                                                                     // 2338\n                                                                                                                     // 2339\n// date from string and format string                                                                                // 2340\nfunction configFromStringAndFormat(config) {                                                                         // 2341\n    // TODO: Move this to another part of the creation flow to prevent circular deps                                 // 2342\n    if (config._f === hooks.ISO_8601) {                                                                              // 2343\n        configFromISO(config);                                                                                       // 2344\n        return;                                                                                                      // 2345\n    }                                                                                                                // 2346\n    if (config._f === hooks.RFC_2822) {                                                                              // 2347\n        configFromRFC2822(config);                                                                                   // 2348\n        return;                                                                                                      // 2349\n    }                                                                                                                // 2350\n    config._a = [];                                                                                                  // 2351\n    getParsingFlags(config).empty = true;                                                                            // 2352\n                                                                                                                     // 2353\n    // This array is used to make a Date, either with `new Date` or `Date.UTC`                                       // 2354\n    var string = '' + config._i,                                                                                     // 2355\n        i, parsedInput, tokens, token, skipped,                                                                      // 2356\n        stringLength = string.length,                                                                                // 2357\n        totalParsedInputLength = 0;                                                                                  // 2358\n                                                                                                                     // 2359\n    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];                                  // 2360\n                                                                                                                     // 2361\n    for (i = 0; i < tokens.length; i++) {                                                                            // 2362\n        token = tokens[i];                                                                                           // 2363\n        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];                                 // 2364\n        // console.log('token', token, 'parsedInput', parsedInput,                                                   // 2365\n        //         'regex', getParseRegexForToken(token, config));                                                   // 2366\n        if (parsedInput) {                                                                                           // 2367\n            skipped = string.substr(0, string.indexOf(parsedInput));                                                 // 2368\n            if (skipped.length > 0) {                                                                                // 2369\n                getParsingFlags(config).unusedInput.push(skipped);                                                   // 2370\n            }                                                                                                        // 2371\n            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);                                 // 2372\n            totalParsedInputLength += parsedInput.length;                                                            // 2373\n        }                                                                                                            // 2374\n        // don't parse if it's not a known token                                                                     // 2375\n        if (formatTokenFunctions[token]) {                                                                           // 2376\n            if (parsedInput) {                                                                                       // 2377\n                getParsingFlags(config).empty = false;                                                               // 2378\n            }                                                                                                        // 2379\n            else {                                                                                                   // 2380\n                getParsingFlags(config).unusedTokens.push(token);                                                    // 2381\n            }                                                                                                        // 2382\n            addTimeToArrayFromToken(token, parsedInput, config);                                                     // 2383\n        }                                                                                                            // 2384\n        else if (config._strict && !parsedInput) {                                                                   // 2385\n            getParsingFlags(config).unusedTokens.push(token);                                                        // 2386\n        }                                                                                                            // 2387\n    }                                                                                                                // 2388\n                                                                                                                     // 2389\n    // add remaining unparsed input length to the string                                                             // 2390\n    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;                                   // 2391\n    if (string.length > 0) {                                                                                         // 2392\n        getParsingFlags(config).unusedInput.push(string);                                                            // 2393\n    }                                                                                                                // 2394\n                                                                                                                     // 2395\n    // clear _12h flag if hour is <= 12                                                                              // 2396\n    if (config._a[HOUR] <= 12 &&                                                                                     // 2397\n        getParsingFlags(config).bigHour === true &&                                                                  // 2398\n        config._a[HOUR] > 0) {                                                                                       // 2399\n        getParsingFlags(config).bigHour = undefined;                                                                 // 2400\n    }                                                                                                                // 2401\n                                                                                                                     // 2402\n    getParsingFlags(config).parsedDateParts = config._a.slice(0);                                                    // 2403\n    getParsingFlags(config).meridiem = config._meridiem;                                                             // 2404\n    // handle meridiem                                                                                               // 2405\n    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);                            // 2406\n                                                                                                                     // 2407\n    configFromArray(config);                                                                                         // 2408\n    checkOverflow(config);                                                                                           // 2409\n}                                                                                                                    // 2410\n                                                                                                                     // 2411\n                                                                                                                     // 2412\nfunction meridiemFixWrap (locale, hour, meridiem) {                                                                  // 2413\n    var isPm;                                                                                                        // 2414\n                                                                                                                     // 2415\n    if (meridiem == null) {                                                                                          // 2416\n        // nothing to do                                                                                             // 2417\n        return hour;                                                                                                 // 2418\n    }                                                                                                                // 2419\n    if (locale.meridiemHour != null) {                                                                               // 2420\n        return locale.meridiemHour(hour, meridiem);                                                                  // 2421\n    } else if (locale.isPM != null) {                                                                                // 2422\n        // Fallback                                                                                                  // 2423\n        isPm = locale.isPM(meridiem);                                                                                // 2424\n        if (isPm && hour < 12) {                                                                                     // 2425\n            hour += 12;                                                                                              // 2426\n        }                                                                                                            // 2427\n        if (!isPm && hour === 12) {                                                                                  // 2428\n            hour = 0;                                                                                                // 2429\n        }                                                                                                            // 2430\n        return hour;                                                                                                 // 2431\n    } else {                                                                                                         // 2432\n        // this is not supposed to happen                                                                            // 2433\n        return hour;                                                                                                 // 2434\n    }                                                                                                                // 2435\n}                                                                                                                    // 2436\n                                                                                                                     // 2437\n// date from string and array of format strings                                                                      // 2438\nfunction configFromStringAndArray(config) {                                                                          // 2439\n    var tempConfig,                                                                                                  // 2440\n        bestMoment,                                                                                                  // 2441\n                                                                                                                     // 2442\n        scoreToBeat,                                                                                                 // 2443\n        i,                                                                                                           // 2444\n        currentScore;                                                                                                // 2445\n                                                                                                                     // 2446\n    if (config._f.length === 0) {                                                                                    // 2447\n        getParsingFlags(config).invalidFormat = true;                                                                // 2448\n        config._d = new Date(NaN);                                                                                   // 2449\n        return;                                                                                                      // 2450\n    }                                                                                                                // 2451\n                                                                                                                     // 2452\n    for (i = 0; i < config._f.length; i++) {                                                                         // 2453\n        currentScore = 0;                                                                                            // 2454\n        tempConfig = copyConfig({}, config);                                                                         // 2455\n        if (config._useUTC != null) {                                                                                // 2456\n            tempConfig._useUTC = config._useUTC;                                                                     // 2457\n        }                                                                                                            // 2458\n        tempConfig._f = config._f[i];                                                                                // 2459\n        configFromStringAndFormat(tempConfig);                                                                       // 2460\n                                                                                                                     // 2461\n        if (!isValid(tempConfig)) {                                                                                  // 2462\n            continue;                                                                                                // 2463\n        }                                                                                                            // 2464\n                                                                                                                     // 2465\n        // if there is any input that was not parsed add a penalty for that format                                   // 2466\n        currentScore += getParsingFlags(tempConfig).charsLeftOver;                                                   // 2467\n                                                                                                                     // 2468\n        //or tokens                                                                                                  // 2469\n        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;                                        // 2470\n                                                                                                                     // 2471\n        getParsingFlags(tempConfig).score = currentScore;                                                            // 2472\n                                                                                                                     // 2473\n        if (scoreToBeat == null || currentScore < scoreToBeat) {                                                     // 2474\n            scoreToBeat = currentScore;                                                                              // 2475\n            bestMoment = tempConfig;                                                                                 // 2476\n        }                                                                                                            // 2477\n    }                                                                                                                // 2478\n                                                                                                                     // 2479\n    extend(config, bestMoment || tempConfig);                                                                        // 2480\n}                                                                                                                    // 2481\n                                                                                                                     // 2482\nfunction configFromObject(config) {                                                                                  // 2483\n    if (config._d) {                                                                                                 // 2484\n        return;                                                                                                      // 2485\n    }                                                                                                                // 2486\n                                                                                                                     // 2487\n    var i = normalizeObjectUnits(config._i);                                                                         // 2488\n    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {  // 2489\n        return obj && parseInt(obj, 10);                                                                             // 2490\n    });                                                                                                              // 2491\n                                                                                                                     // 2492\n    configFromArray(config);                                                                                         // 2493\n}                                                                                                                    // 2494\n                                                                                                                     // 2495\nfunction createFromConfig (config) {                                                                                 // 2496\n    var res = new Moment(checkOverflow(prepareConfig(config)));                                                      // 2497\n    if (res._nextDay) {                                                                                              // 2498\n        // Adding is smart enough around DST                                                                         // 2499\n        res.add(1, 'd');                                                                                             // 2500\n        res._nextDay = undefined;                                                                                    // 2501\n    }                                                                                                                // 2502\n                                                                                                                     // 2503\n    return res;                                                                                                      // 2504\n}                                                                                                                    // 2505\n                                                                                                                     // 2506\nfunction prepareConfig (config) {                                                                                    // 2507\n    var input = config._i,                                                                                           // 2508\n        format = config._f;                                                                                          // 2509\n                                                                                                                     // 2510\n    config._locale = config._locale || getLocale(config._l);                                                         // 2511\n                                                                                                                     // 2512\n    if (input === null || (format === undefined && input === '')) {                                                  // 2513\n        return createInvalid({nullInput: true});                                                                     // 2514\n    }                                                                                                                // 2515\n                                                                                                                     // 2516\n    if (typeof input === 'string') {                                                                                 // 2517\n        config._i = input = config._locale.preparse(input);                                                          // 2518\n    }                                                                                                                // 2519\n                                                                                                                     // 2520\n    if (isMoment(input)) {                                                                                           // 2521\n        return new Moment(checkOverflow(input));                                                                     // 2522\n    } else if (isDate(input)) {                                                                                      // 2523\n        config._d = input;                                                                                           // 2524\n    } else if (isArray(format)) {                                                                                    // 2525\n        configFromStringAndArray(config);                                                                            // 2526\n    } else if (format) {                                                                                             // 2527\n        configFromStringAndFormat(config);                                                                           // 2528\n    }  else {                                                                                                        // 2529\n        configFromInput(config);                                                                                     // 2530\n    }                                                                                                                // 2531\n                                                                                                                     // 2532\n    if (!isValid(config)) {                                                                                          // 2533\n        config._d = null;                                                                                            // 2534\n    }                                                                                                                // 2535\n                                                                                                                     // 2536\n    return config;                                                                                                   // 2537\n}                                                                                                                    // 2538\n                                                                                                                     // 2539\nfunction configFromInput(config) {                                                                                   // 2540\n    var input = config._i;                                                                                           // 2541\n    if (isUndefined(input)) {                                                                                        // 2542\n        config._d = new Date(hooks.now());                                                                           // 2543\n    } else if (isDate(input)) {                                                                                      // 2544\n        config._d = new Date(input.valueOf());                                                                       // 2545\n    } else if (typeof input === 'string') {                                                                          // 2546\n        configFromString(config);                                                                                    // 2547\n    } else if (isArray(input)) {                                                                                     // 2548\n        config._a = map(input.slice(0), function (obj) {                                                             // 2549\n            return parseInt(obj, 10);                                                                                // 2550\n        });                                                                                                          // 2551\n        configFromArray(config);                                                                                     // 2552\n    } else if (isObject(input)) {                                                                                    // 2553\n        configFromObject(config);                                                                                    // 2554\n    } else if (isNumber(input)) {                                                                                    // 2555\n        // from milliseconds                                                                                         // 2556\n        config._d = new Date(input);                                                                                 // 2557\n    } else {                                                                                                         // 2558\n        hooks.createFromInputFallback(config);                                                                       // 2559\n    }                                                                                                                // 2560\n}                                                                                                                    // 2561\n                                                                                                                     // 2562\nfunction createLocalOrUTC (input, format, locale, strict, isUTC) {                                                   // 2563\n    var c = {};                                                                                                      // 2564\n                                                                                                                     // 2565\n    if (locale === true || locale === false) {                                                                       // 2566\n        strict = locale;                                                                                             // 2567\n        locale = undefined;                                                                                          // 2568\n    }                                                                                                                // 2569\n                                                                                                                     // 2570\n    if ((isObject(input) && isObjectEmpty(input)) ||                                                                 // 2571\n            (isArray(input) && input.length === 0)) {                                                                // 2572\n        input = undefined;                                                                                           // 2573\n    }                                                                                                                // 2574\n    // object construction must be done this way.                                                                    // 2575\n    // https://github.com/moment/moment/issues/1423                                                                  // 2576\n    c._isAMomentObject = true;                                                                                       // 2577\n    c._useUTC = c._isUTC = isUTC;                                                                                    // 2578\n    c._l = locale;                                                                                                   // 2579\n    c._i = input;                                                                                                    // 2580\n    c._f = format;                                                                                                   // 2581\n    c._strict = strict;                                                                                              // 2582\n                                                                                                                     // 2583\n    return createFromConfig(c);                                                                                      // 2584\n}                                                                                                                    // 2585\n                                                                                                                     // 2586\nfunction createLocal (input, format, locale, strict) {                                                               // 2587\n    return createLocalOrUTC(input, format, locale, strict, false);                                                   // 2588\n}                                                                                                                    // 2589\n                                                                                                                     // 2590\nvar prototypeMin = deprecate(                                                                                        // 2591\n    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',            // 2592\n    function () {                                                                                                    // 2593\n        var other = createLocal.apply(null, arguments);                                                              // 2594\n        if (this.isValid() && other.isValid()) {                                                                     // 2595\n            return other < this ? this : other;                                                                      // 2596\n        } else {                                                                                                     // 2597\n            return createInvalid();                                                                                  // 2598\n        }                                                                                                            // 2599\n    }                                                                                                                // 2600\n);                                                                                                                   // 2601\n                                                                                                                     // 2602\nvar prototypeMax = deprecate(                                                                                        // 2603\n    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',            // 2604\n    function () {                                                                                                    // 2605\n        var other = createLocal.apply(null, arguments);                                                              // 2606\n        if (this.isValid() && other.isValid()) {                                                                     // 2607\n            return other > this ? this : other;                                                                      // 2608\n        } else {                                                                                                     // 2609\n            return createInvalid();                                                                                  // 2610\n        }                                                                                                            // 2611\n    }                                                                                                                // 2612\n);                                                                                                                   // 2613\n                                                                                                                     // 2614\n// Pick a moment m from moments so that m[fn](other) is true for all                                                 // 2615\n// other. This relies on the function fn to be transitive.                                                           // 2616\n//                                                                                                                   // 2617\n// moments should either be an array of moment objects or an array, whose                                            // 2618\n// first element is an array of moment objects.                                                                      // 2619\nfunction pickBy(fn, moments) {                                                                                       // 2620\n    var res, i;                                                                                                      // 2621\n    if (moments.length === 1 && isArray(moments[0])) {                                                               // 2622\n        moments = moments[0];                                                                                        // 2623\n    }                                                                                                                // 2624\n    if (!moments.length) {                                                                                           // 2625\n        return createLocal();                                                                                        // 2626\n    }                                                                                                                // 2627\n    res = moments[0];                                                                                                // 2628\n    for (i = 1; i < moments.length; ++i) {                                                                           // 2629\n        if (!moments[i].isValid() || moments[i][fn](res)) {                                                          // 2630\n            res = moments[i];                                                                                        // 2631\n        }                                                                                                            // 2632\n    }                                                                                                                // 2633\n    return res;                                                                                                      // 2634\n}                                                                                                                    // 2635\n                                                                                                                     // 2636\n// TODO: Use [].sort instead?                                                                                        // 2637\nfunction min () {                                                                                                    // 2638\n    var args = [].slice.call(arguments, 0);                                                                          // 2639\n                                                                                                                     // 2640\n    return pickBy('isBefore', args);                                                                                 // 2641\n}                                                                                                                    // 2642\n                                                                                                                     // 2643\nfunction max () {                                                                                                    // 2644\n    var args = [].slice.call(arguments, 0);                                                                          // 2645\n                                                                                                                     // 2646\n    return pickBy('isAfter', args);                                                                                  // 2647\n}                                                                                                                    // 2648\n                                                                                                                     // 2649\nvar now = function () {                                                                                              // 2650\n    return Date.now ? Date.now() : +(new Date());                                                                    // 2651\n};                                                                                                                   // 2652\n                                                                                                                     // 2653\nvar ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];               // 2654\n                                                                                                                     // 2655\nfunction isDurationValid(m) {                                                                                        // 2656\n    for (var key in m) {                                                                                             // 2657\n        if (!(ordering.indexOf(key) !== -1 && (m[key] == null || !isNaN(m[key])))) {                                 // 2658\n            return false;                                                                                            // 2659\n        }                                                                                                            // 2660\n    }                                                                                                                // 2661\n                                                                                                                     // 2662\n    var unitHasDecimal = false;                                                                                      // 2663\n    for (var i = 0; i < ordering.length; ++i) {                                                                      // 2664\n        if (m[ordering[i]]) {                                                                                        // 2665\n            if (unitHasDecimal) {                                                                                    // 2666\n                return false; // only allow non-integers for smallest unit                                           // 2667\n            }                                                                                                        // 2668\n            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {                                              // 2669\n                unitHasDecimal = true;                                                                               // 2670\n            }                                                                                                        // 2671\n        }                                                                                                            // 2672\n    }                                                                                                                // 2673\n                                                                                                                     // 2674\n    return true;                                                                                                     // 2675\n}                                                                                                                    // 2676\n                                                                                                                     // 2677\nfunction isValid$1() {                                                                                               // 2678\n    return this._isValid;                                                                                            // 2679\n}                                                                                                                    // 2680\n                                                                                                                     // 2681\nfunction createInvalid$1() {                                                                                         // 2682\n    return createDuration(NaN);                                                                                      // 2683\n}                                                                                                                    // 2684\n                                                                                                                     // 2685\nfunction Duration (duration) {                                                                                       // 2686\n    var normalizedInput = normalizeObjectUnits(duration),                                                            // 2687\n        years = normalizedInput.year || 0,                                                                           // 2688\n        quarters = normalizedInput.quarter || 0,                                                                     // 2689\n        months = normalizedInput.month || 0,                                                                         // 2690\n        weeks = normalizedInput.week || 0,                                                                           // 2691\n        days = normalizedInput.day || 0,                                                                             // 2692\n        hours = normalizedInput.hour || 0,                                                                           // 2693\n        minutes = normalizedInput.minute || 0,                                                                       // 2694\n        seconds = normalizedInput.second || 0,                                                                       // 2695\n        milliseconds = normalizedInput.millisecond || 0;                                                             // 2696\n                                                                                                                     // 2697\n    this._isValid = isDurationValid(normalizedInput);                                                                // 2698\n                                                                                                                     // 2699\n    // representation for dateAddRemove                                                                              // 2700\n    this._milliseconds = +milliseconds +                                                                             // 2701\n        seconds * 1e3 + // 1000                                                                                      // 2702\n        minutes * 6e4 + // 1000 * 60                                                                                 // 2703\n        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n    // Because of dateAddRemove treats 24 hours as different from a                                                  // 2705\n    // day when working around DST, we need to store them separately                                                 // 2706\n    this._days = +days +                                                                                             // 2707\n        weeks * 7;                                                                                                   // 2708\n    // It is impossible translate months into days without knowing                                                   // 2709\n    // which months you are are talking about, so we have to store                                                   // 2710\n    // it separately.                                                                                                // 2711\n    this._months = +months +                                                                                         // 2712\n        quarters * 3 +                                                                                               // 2713\n        years * 12;                                                                                                  // 2714\n                                                                                                                     // 2715\n    this._data = {};                                                                                                 // 2716\n                                                                                                                     // 2717\n    this._locale = getLocale();                                                                                      // 2718\n                                                                                                                     // 2719\n    this._bubble();                                                                                                  // 2720\n}                                                                                                                    // 2721\n                                                                                                                     // 2722\nfunction isDuration (obj) {                                                                                          // 2723\n    return obj instanceof Duration;                                                                                  // 2724\n}                                                                                                                    // 2725\n                                                                                                                     // 2726\nfunction absRound (number) {                                                                                         // 2727\n    if (number < 0) {                                                                                                // 2728\n        return Math.round(-1 * number) * -1;                                                                         // 2729\n    } else {                                                                                                         // 2730\n        return Math.round(number);                                                                                   // 2731\n    }                                                                                                                // 2732\n}                                                                                                                    // 2733\n                                                                                                                     // 2734\n// FORMATTING                                                                                                        // 2735\n                                                                                                                     // 2736\nfunction offset (token, separator) {                                                                                 // 2737\n    addFormatToken(token, 0, 0, function () {                                                                        // 2738\n        var offset = this.utcOffset();                                                                               // 2739\n        var sign = '+';                                                                                              // 2740\n        if (offset < 0) {                                                                                            // 2741\n            offset = -offset;                                                                                        // 2742\n            sign = '-';                                                                                              // 2743\n        }                                                                                                            // 2744\n        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);                       // 2745\n    });                                                                                                              // 2746\n}                                                                                                                    // 2747\n                                                                                                                     // 2748\noffset('Z', ':');                                                                                                    // 2749\noffset('ZZ', '');                                                                                                    // 2750\n                                                                                                                     // 2751\n// PARSING                                                                                                           // 2752\n                                                                                                                     // 2753\naddRegexToken('Z',  matchShortOffset);                                                                               // 2754\naddRegexToken('ZZ', matchShortOffset);                                                                               // 2755\naddParseToken(['Z', 'ZZ'], function (input, array, config) {                                                         // 2756\n    config._useUTC = true;                                                                                           // 2757\n    config._tzm = offsetFromString(matchShortOffset, input);                                                         // 2758\n});                                                                                                                  // 2759\n                                                                                                                     // 2760\n// HELPERS                                                                                                           // 2761\n                                                                                                                     // 2762\n// timezone chunker                                                                                                  // 2763\n// '+10:00' > ['10',  '00']                                                                                          // 2764\n// '-1530'  > ['-15', '30']                                                                                          // 2765\nvar chunkOffset = /([\\+\\-]|\\d\\d)/gi;                                                                                 // 2766\n                                                                                                                     // 2767\nfunction offsetFromString(matcher, string) {                                                                         // 2768\n    var matches = (string || '').match(matcher);                                                                     // 2769\n                                                                                                                     // 2770\n    if (matches === null) {                                                                                          // 2771\n        return null;                                                                                                 // 2772\n    }                                                                                                                // 2773\n                                                                                                                     // 2774\n    var chunk   = matches[matches.length - 1] || [];                                                                 // 2775\n    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];                                                    // 2776\n    var minutes = +(parts[1] * 60) + toInt(parts[2]);                                                                // 2777\n                                                                                                                     // 2778\n    return minutes === 0 ?                                                                                           // 2779\n      0 :                                                                                                            // 2780\n      parts[0] === '+' ? minutes : -minutes;                                                                         // 2781\n}                                                                                                                    // 2782\n                                                                                                                     // 2783\n// Return a moment from input, that is local/utc/zone equivalent to model.                                           // 2784\nfunction cloneWithOffset(input, model) {                                                                             // 2785\n    var res, diff;                                                                                                   // 2786\n    if (model._isUTC) {                                                                                              // 2787\n        res = model.clone();                                                                                         // 2788\n        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();  // 2789\n        // Use low-level api, because this fn is low-level api.                                                      // 2790\n        res._d.setTime(res._d.valueOf() + diff);                                                                     // 2791\n        hooks.updateOffset(res, false);                                                                              // 2792\n        return res;                                                                                                  // 2793\n    } else {                                                                                                         // 2794\n        return createLocal(input).local();                                                                           // 2795\n    }                                                                                                                // 2796\n}                                                                                                                    // 2797\n                                                                                                                     // 2798\nfunction getDateOffset (m) {                                                                                         // 2799\n    // On Firefox.24 Date#getTimezoneOffset returns a floating point.                                                // 2800\n    // https://github.com/moment/moment/pull/1871                                                                    // 2801\n    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;                                                          // 2802\n}                                                                                                                    // 2803\n                                                                                                                     // 2804\n// HOOKS                                                                                                             // 2805\n                                                                                                                     // 2806\n// This function will be called whenever a moment is mutated.                                                        // 2807\n// It is intended to keep the offset in sync with the timezone.                                                      // 2808\nhooks.updateOffset = function () {};                                                                                 // 2809\n                                                                                                                     // 2810\n// MOMENTS                                                                                                           // 2811\n                                                                                                                     // 2812\n// keepLocalTime = true means only change the timezone, without                                                      // 2813\n// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->                                              // 2814\n// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset                                               // 2815\n// +0200, so we adjust the time as needed, to be valid.                                                              // 2816\n//                                                                                                                   // 2817\n// Keeping the time actually adds/subtracts (one hour)                                                               // 2818\n// from the actual represented time. That is why we call updateOffset                                                // 2819\n// a second time. In case it wants us to change the offset again                                                     // 2820\n// _changeInProgress == true case, then we have to adjust, because                                                   // 2821\n// there is no such time in the given timezone.                                                                      // 2822\nfunction getSetOffset (input, keepLocalTime, keepMinutes) {                                                          // 2823\n    var offset = this._offset || 0,                                                                                  // 2824\n        localAdjust;                                                                                                 // 2825\n    if (!this.isValid()) {                                                                                           // 2826\n        return input != null ? this : NaN;                                                                           // 2827\n    }                                                                                                                // 2828\n    if (input != null) {                                                                                             // 2829\n        if (typeof input === 'string') {                                                                             // 2830\n            input = offsetFromString(matchShortOffset, input);                                                       // 2831\n            if (input === null) {                                                                                    // 2832\n                return this;                                                                                         // 2833\n            }                                                                                                        // 2834\n        } else if (Math.abs(input) < 16 && !keepMinutes) {                                                           // 2835\n            input = input * 60;                                                                                      // 2836\n        }                                                                                                            // 2837\n        if (!this._isUTC && keepLocalTime) {                                                                         // 2838\n            localAdjust = getDateOffset(this);                                                                       // 2839\n        }                                                                                                            // 2840\n        this._offset = input;                                                                                        // 2841\n        this._isUTC = true;                                                                                          // 2842\n        if (localAdjust != null) {                                                                                   // 2843\n            this.add(localAdjust, 'm');                                                                              // 2844\n        }                                                                                                            // 2845\n        if (offset !== input) {                                                                                      // 2846\n            if (!keepLocalTime || this._changeInProgress) {                                                          // 2847\n                addSubtract(this, createDuration(input - offset, 'm'), 1, false);                                    // 2848\n            } else if (!this._changeInProgress) {                                                                    // 2849\n                this._changeInProgress = true;                                                                       // 2850\n                hooks.updateOffset(this, true);                                                                      // 2851\n                this._changeInProgress = null;                                                                       // 2852\n            }                                                                                                        // 2853\n        }                                                                                                            // 2854\n        return this;                                                                                                 // 2855\n    } else {                                                                                                         // 2856\n        return this._isUTC ? offset : getDateOffset(this);                                                           // 2857\n    }                                                                                                                // 2858\n}                                                                                                                    // 2859\n                                                                                                                     // 2860\nfunction getSetZone (input, keepLocalTime) {                                                                         // 2861\n    if (input != null) {                                                                                             // 2862\n        if (typeof input !== 'string') {                                                                             // 2863\n            input = -input;                                                                                          // 2864\n        }                                                                                                            // 2865\n                                                                                                                     // 2866\n        this.utcOffset(input, keepLocalTime);                                                                        // 2867\n                                                                                                                     // 2868\n        return this;                                                                                                 // 2869\n    } else {                                                                                                         // 2870\n        return -this.utcOffset();                                                                                    // 2871\n    }                                                                                                                // 2872\n}                                                                                                                    // 2873\n                                                                                                                     // 2874\nfunction setOffsetToUTC (keepLocalTime) {                                                                            // 2875\n    return this.utcOffset(0, keepLocalTime);                                                                         // 2876\n}                                                                                                                    // 2877\n                                                                                                                     // 2878\nfunction setOffsetToLocal (keepLocalTime) {                                                                          // 2879\n    if (this._isUTC) {                                                                                               // 2880\n        this.utcOffset(0, keepLocalTime);                                                                            // 2881\n        this._isUTC = false;                                                                                         // 2882\n                                                                                                                     // 2883\n        if (keepLocalTime) {                                                                                         // 2884\n            this.subtract(getDateOffset(this), 'm');                                                                 // 2885\n        }                                                                                                            // 2886\n    }                                                                                                                // 2887\n    return this;                                                                                                     // 2888\n}                                                                                                                    // 2889\n                                                                                                                     // 2890\nfunction setOffsetToParsedOffset () {                                                                                // 2891\n    if (this._tzm != null) {                                                                                         // 2892\n        this.utcOffset(this._tzm, false, true);                                                                      // 2893\n    } else if (typeof this._i === 'string') {                                                                        // 2894\n        var tZone = offsetFromString(matchOffset, this._i);                                                          // 2895\n        if (tZone != null) {                                                                                         // 2896\n            this.utcOffset(tZone);                                                                                   // 2897\n        }                                                                                                            // 2898\n        else {                                                                                                       // 2899\n            this.utcOffset(0, true);                                                                                 // 2900\n        }                                                                                                            // 2901\n    }                                                                                                                // 2902\n    return this;                                                                                                     // 2903\n}                                                                                                                    // 2904\n                                                                                                                     // 2905\nfunction hasAlignedHourOffset (input) {                                                                              // 2906\n    if (!this.isValid()) {                                                                                           // 2907\n        return false;                                                                                                // 2908\n    }                                                                                                                // 2909\n    input = input ? createLocal(input).utcOffset() : 0;                                                              // 2910\n                                                                                                                     // 2911\n    return (this.utcOffset() - input) % 60 === 0;                                                                    // 2912\n}                                                                                                                    // 2913\n                                                                                                                     // 2914\nfunction isDaylightSavingTime () {                                                                                   // 2915\n    return (                                                                                                         // 2916\n        this.utcOffset() > this.clone().month(0).utcOffset() ||                                                      // 2917\n        this.utcOffset() > this.clone().month(5).utcOffset()                                                         // 2918\n    );                                                                                                               // 2919\n}                                                                                                                    // 2920\n                                                                                                                     // 2921\nfunction isDaylightSavingTimeShifted () {                                                                            // 2922\n    if (!isUndefined(this._isDSTShifted)) {                                                                          // 2923\n        return this._isDSTShifted;                                                                                   // 2924\n    }                                                                                                                // 2925\n                                                                                                                     // 2926\n    var c = {};                                                                                                      // 2927\n                                                                                                                     // 2928\n    copyConfig(c, this);                                                                                             // 2929\n    c = prepareConfig(c);                                                                                            // 2930\n                                                                                                                     // 2931\n    if (c._a) {                                                                                                      // 2932\n        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);                                                  // 2933\n        this._isDSTShifted = this.isValid() &&                                                                       // 2934\n            compareArrays(c._a, other.toArray()) > 0;                                                                // 2935\n    } else {                                                                                                         // 2936\n        this._isDSTShifted = false;                                                                                  // 2937\n    }                                                                                                                // 2938\n                                                                                                                     // 2939\n    return this._isDSTShifted;                                                                                       // 2940\n}                                                                                                                    // 2941\n                                                                                                                     // 2942\nfunction isLocal () {                                                                                                // 2943\n    return this.isValid() ? !this._isUTC : false;                                                                    // 2944\n}                                                                                                                    // 2945\n                                                                                                                     // 2946\nfunction isUtcOffset () {                                                                                            // 2947\n    return this.isValid() ? this._isUTC : false;                                                                     // 2948\n}                                                                                                                    // 2949\n                                                                                                                     // 2950\nfunction isUtc () {                                                                                                  // 2951\n    return this.isValid() ? this._isUTC && this._offset === 0 : false;                                               // 2952\n}                                                                                                                    // 2953\n                                                                                                                     // 2954\n// ASP.NET json date format regex                                                                                    // 2955\nvar aspNetRegex = /^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;                                           // 2956\n                                                                                                                     // 2957\n// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html                         // 2958\n// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere                                         // 2959\n// and further modified to allow for strings containing both week and day                                            // 2960\nvar isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;\n                                                                                                                     // 2962\nfunction createDuration (input, key) {                                                                               // 2963\n    var duration = input,                                                                                            // 2964\n        // matching against regexp is expensive, do it on demand                                                     // 2965\n        match = null,                                                                                                // 2966\n        sign,                                                                                                        // 2967\n        ret,                                                                                                         // 2968\n        diffRes;                                                                                                     // 2969\n                                                                                                                     // 2970\n    if (isDuration(input)) {                                                                                         // 2971\n        duration = {                                                                                                 // 2972\n            ms : input._milliseconds,                                                                                // 2973\n            d  : input._days,                                                                                        // 2974\n            M  : input._months                                                                                       // 2975\n        };                                                                                                           // 2976\n    } else if (isNumber(input)) {                                                                                    // 2977\n        duration = {};                                                                                               // 2978\n        if (key) {                                                                                                   // 2979\n            duration[key] = input;                                                                                   // 2980\n        } else {                                                                                                     // 2981\n            duration.milliseconds = input;                                                                           // 2982\n        }                                                                                                            // 2983\n    } else if (!!(match = aspNetRegex.exec(input))) {                                                                // 2984\n        sign = (match[1] === '-') ? -1 : 1;                                                                          // 2985\n        duration = {                                                                                                 // 2986\n            y  : 0,                                                                                                  // 2987\n            d  : toInt(match[DATE])                         * sign,                                                  // 2988\n            h  : toInt(match[HOUR])                         * sign,                                                  // 2989\n            m  : toInt(match[MINUTE])                       * sign,                                                  // 2990\n            s  : toInt(match[SECOND])                       * sign,                                                  // 2991\n            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n        };                                                                                                           // 2993\n    } else if (!!(match = isoRegex.exec(input))) {                                                                   // 2994\n        sign = (match[1] === '-') ? -1 : 1;                                                                          // 2995\n        duration = {                                                                                                 // 2996\n            y : parseIso(match[2], sign),                                                                            // 2997\n            M : parseIso(match[3], sign),                                                                            // 2998\n            w : parseIso(match[4], sign),                                                                            // 2999\n            d : parseIso(match[5], sign),                                                                            // 3000\n            h : parseIso(match[6], sign),                                                                            // 3001\n            m : parseIso(match[7], sign),                                                                            // 3002\n            s : parseIso(match[8], sign)                                                                             // 3003\n        };                                                                                                           // 3004\n    } else if (duration == null) {// checks for null or undefined                                                    // 3005\n        duration = {};                                                                                               // 3006\n    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {                           // 3007\n        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));                           // 3008\n                                                                                                                     // 3009\n        duration = {};                                                                                               // 3010\n        duration.ms = diffRes.milliseconds;                                                                          // 3011\n        duration.M = diffRes.months;                                                                                 // 3012\n    }                                                                                                                // 3013\n                                                                                                                     // 3014\n    ret = new Duration(duration);                                                                                    // 3015\n                                                                                                                     // 3016\n    if (isDuration(input) && hasOwnProp(input, '_locale')) {                                                         // 3017\n        ret._locale = input._locale;                                                                                 // 3018\n    }                                                                                                                // 3019\n                                                                                                                     // 3020\n    return ret;                                                                                                      // 3021\n}                                                                                                                    // 3022\n                                                                                                                     // 3023\ncreateDuration.fn = Duration.prototype;                                                                              // 3024\ncreateDuration.invalid = createInvalid$1;                                                                            // 3025\n                                                                                                                     // 3026\nfunction parseIso (inp, sign) {                                                                                      // 3027\n    // We'd normally use ~~inp for this, but unfortunately it also                                                   // 3028\n    // converts floats to ints.                                                                                      // 3029\n    // inp may be undefined, so careful calling replace on it.                                                       // 3030\n    var res = inp && parseFloat(inp.replace(',', '.'));                                                              // 3031\n    // apply sign while we're at it                                                                                  // 3032\n    return (isNaN(res) ? 0 : res) * sign;                                                                            // 3033\n}                                                                                                                    // 3034\n                                                                                                                     // 3035\nfunction positiveMomentsDifference(base, other) {                                                                    // 3036\n    var res = {milliseconds: 0, months: 0};                                                                          // 3037\n                                                                                                                     // 3038\n    res.months = other.month() - base.month() +                                                                      // 3039\n        (other.year() - base.year()) * 12;                                                                           // 3040\n    if (base.clone().add(res.months, 'M').isAfter(other)) {                                                          // 3041\n        --res.months;                                                                                                // 3042\n    }                                                                                                                // 3043\n                                                                                                                     // 3044\n    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));                                                // 3045\n                                                                                                                     // 3046\n    return res;                                                                                                      // 3047\n}                                                                                                                    // 3048\n                                                                                                                     // 3049\nfunction momentsDifference(base, other) {                                                                            // 3050\n    var res;                                                                                                         // 3051\n    if (!(base.isValid() && other.isValid())) {                                                                      // 3052\n        return {milliseconds: 0, months: 0};                                                                         // 3053\n    }                                                                                                                // 3054\n                                                                                                                     // 3055\n    other = cloneWithOffset(other, base);                                                                            // 3056\n    if (base.isBefore(other)) {                                                                                      // 3057\n        res = positiveMomentsDifference(base, other);                                                                // 3058\n    } else {                                                                                                         // 3059\n        res = positiveMomentsDifference(other, base);                                                                // 3060\n        res.milliseconds = -res.milliseconds;                                                                        // 3061\n        res.months = -res.months;                                                                                    // 3062\n    }                                                                                                                // 3063\n                                                                                                                     // 3064\n    return res;                                                                                                      // 3065\n}                                                                                                                    // 3066\n                                                                                                                     // 3067\n// TODO: remove 'name' arg after deprecation is removed                                                              // 3068\nfunction createAdder(direction, name) {                                                                              // 3069\n    return function (val, period) {                                                                                  // 3070\n        var dur, tmp;                                                                                                // 3071\n        //invert the arguments, but complain about it                                                                // 3072\n        if (period !== null && !isNaN(+period)) {                                                                    // 3073\n            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');                         // 3075\n            tmp = val; val = period; period = tmp;                                                                   // 3076\n        }                                                                                                            // 3077\n                                                                                                                     // 3078\n        val = typeof val === 'string' ? +val : val;                                                                  // 3079\n        dur = createDuration(val, period);                                                                           // 3080\n        addSubtract(this, dur, direction);                                                                           // 3081\n        return this;                                                                                                 // 3082\n    };                                                                                                               // 3083\n}                                                                                                                    // 3084\n                                                                                                                     // 3085\nfunction addSubtract (mom, duration, isAdding, updateOffset) {                                                       // 3086\n    var milliseconds = duration._milliseconds,                                                                       // 3087\n        days = absRound(duration._days),                                                                             // 3088\n        months = absRound(duration._months);                                                                         // 3089\n                                                                                                                     // 3090\n    if (!mom.isValid()) {                                                                                            // 3091\n        // No op                                                                                                     // 3092\n        return;                                                                                                      // 3093\n    }                                                                                                                // 3094\n                                                                                                                     // 3095\n    updateOffset = updateOffset == null ? true : updateOffset;                                                       // 3096\n                                                                                                                     // 3097\n    if (milliseconds) {                                                                                              // 3098\n        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);                                                  // 3099\n    }                                                                                                                // 3100\n    if (days) {                                                                                                      // 3101\n        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);                                                      // 3102\n    }                                                                                                                // 3103\n    if (months) {                                                                                                    // 3104\n        setMonth(mom, get(mom, 'Month') + months * isAdding);                                                        // 3105\n    }                                                                                                                // 3106\n    if (updateOffset) {                                                                                              // 3107\n        hooks.updateOffset(mom, days || months);                                                                     // 3108\n    }                                                                                                                // 3109\n}                                                                                                                    // 3110\n                                                                                                                     // 3111\nvar add      = createAdder(1, 'add');                                                                                // 3112\nvar subtract = createAdder(-1, 'subtract');                                                                          // 3113\n                                                                                                                     // 3114\nfunction getCalendarFormat(myMoment, now) {                                                                          // 3115\n    var diff = myMoment.diff(now, 'days', true);                                                                     // 3116\n    return diff < -6 ? 'sameElse' :                                                                                  // 3117\n            diff < -1 ? 'lastWeek' :                                                                                 // 3118\n            diff < 0 ? 'lastDay' :                                                                                   // 3119\n            diff < 1 ? 'sameDay' :                                                                                   // 3120\n            diff < 2 ? 'nextDay' :                                                                                   // 3121\n            diff < 7 ? 'nextWeek' : 'sameElse';                                                                      // 3122\n}                                                                                                                    // 3123\n                                                                                                                     // 3124\nfunction calendar$1 (time, formats) {                                                                                // 3125\n    // We want to compare the start of today, vs this.                                                               // 3126\n    // Getting start-of-today depends on whether we're local/utc/offset or not.                                      // 3127\n    var now = time || createLocal(),                                                                                 // 3128\n        sod = cloneWithOffset(now, this).startOf('day'),                                                             // 3129\n        format = hooks.calendarFormat(this, sod) || 'sameElse';                                                      // 3130\n                                                                                                                     // 3131\n    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);       // 3132\n                                                                                                                     // 3133\n    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));                        // 3134\n}                                                                                                                    // 3135\n                                                                                                                     // 3136\nfunction clone () {                                                                                                  // 3137\n    return new Moment(this);                                                                                         // 3138\n}                                                                                                                    // 3139\n                                                                                                                     // 3140\nfunction isAfter (input, units) {                                                                                    // 3141\n    var localInput = isMoment(input) ? input : createLocal(input);                                                   // 3142\n    if (!(this.isValid() && localInput.isValid())) {                                                                 // 3143\n        return false;                                                                                                // 3144\n    }                                                                                                                // 3145\n    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');                                             // 3146\n    if (units === 'millisecond') {                                                                                   // 3147\n        return this.valueOf() > localInput.valueOf();                                                                // 3148\n    } else {                                                                                                         // 3149\n        return localInput.valueOf() < this.clone().startOf(units).valueOf();                                         // 3150\n    }                                                                                                                // 3151\n}                                                                                                                    // 3152\n                                                                                                                     // 3153\nfunction isBefore (input, units) {                                                                                   // 3154\n    var localInput = isMoment(input) ? input : createLocal(input);                                                   // 3155\n    if (!(this.isValid() && localInput.isValid())) {                                                                 // 3156\n        return false;                                                                                                // 3157\n    }                                                                                                                // 3158\n    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');                                             // 3159\n    if (units === 'millisecond') {                                                                                   // 3160\n        return this.valueOf() < localInput.valueOf();                                                                // 3161\n    } else {                                                                                                         // 3162\n        return this.clone().endOf(units).valueOf() < localInput.valueOf();                                           // 3163\n    }                                                                                                                // 3164\n}                                                                                                                    // 3165\n                                                                                                                     // 3166\nfunction isBetween (from, to, units, inclusivity) {                                                                  // 3167\n    inclusivity = inclusivity || '()';                                                                               // 3168\n    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&                     // 3169\n        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));                              // 3170\n}                                                                                                                    // 3171\n                                                                                                                     // 3172\nfunction isSame (input, units) {                                                                                     // 3173\n    var localInput = isMoment(input) ? input : createLocal(input),                                                   // 3174\n        inputMs;                                                                                                     // 3175\n    if (!(this.isValid() && localInput.isValid())) {                                                                 // 3176\n        return false;                                                                                                // 3177\n    }                                                                                                                // 3178\n    units = normalizeUnits(units || 'millisecond');                                                                  // 3179\n    if (units === 'millisecond') {                                                                                   // 3180\n        return this.valueOf() === localInput.valueOf();                                                              // 3181\n    } else {                                                                                                         // 3182\n        inputMs = localInput.valueOf();                                                                              // 3183\n        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();   // 3184\n    }                                                                                                                // 3185\n}                                                                                                                    // 3186\n                                                                                                                     // 3187\nfunction isSameOrAfter (input, units) {                                                                              // 3188\n    return this.isSame(input, units) || this.isAfter(input,units);                                                   // 3189\n}                                                                                                                    // 3190\n                                                                                                                     // 3191\nfunction isSameOrBefore (input, units) {                                                                             // 3192\n    return this.isSame(input, units) || this.isBefore(input,units);                                                  // 3193\n}                                                                                                                    // 3194\n                                                                                                                     // 3195\nfunction diff (input, units, asFloat) {                                                                              // 3196\n    var that,                                                                                                        // 3197\n        zoneDelta,                                                                                                   // 3198\n        delta, output;                                                                                               // 3199\n                                                                                                                     // 3200\n    if (!this.isValid()) {                                                                                           // 3201\n        return NaN;                                                                                                  // 3202\n    }                                                                                                                // 3203\n                                                                                                                     // 3204\n    that = cloneWithOffset(input, this);                                                                             // 3205\n                                                                                                                     // 3206\n    if (!that.isValid()) {                                                                                           // 3207\n        return NaN;                                                                                                  // 3208\n    }                                                                                                                // 3209\n                                                                                                                     // 3210\n    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;                                                         // 3211\n                                                                                                                     // 3212\n    units = normalizeUnits(units);                                                                                   // 3213\n                                                                                                                     // 3214\n    if (units === 'year' || units === 'month' || units === 'quarter') {                                              // 3215\n        output = monthDiff(this, that);                                                                              // 3216\n        if (units === 'quarter') {                                                                                   // 3217\n            output = output / 3;                                                                                     // 3218\n        } else if (units === 'year') {                                                                               // 3219\n            output = output / 12;                                                                                    // 3220\n        }                                                                                                            // 3221\n    } else {                                                                                                         // 3222\n        delta = this - that;                                                                                         // 3223\n        output = units === 'second' ? delta / 1e3 : // 1000                                                          // 3224\n            units === 'minute' ? delta / 6e4 : // 1000 * 60                                                          // 3225\n            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60                                                      // 3226\n            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst                       // 3227\n            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst                 // 3228\n            delta;                                                                                                   // 3229\n    }                                                                                                                // 3230\n    return asFloat ? output : absFloor(output);                                                                      // 3231\n}                                                                                                                    // 3232\n                                                                                                                     // 3233\nfunction monthDiff (a, b) {                                                                                          // 3234\n    // difference in months                                                                                          // 3235\n    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),                                     // 3236\n        // b is in (anchor - 1 month, anchor + 1 month)                                                              // 3237\n        anchor = a.clone().add(wholeMonthDiff, 'months'),                                                            // 3238\n        anchor2, adjust;                                                                                             // 3239\n                                                                                                                     // 3240\n    if (b - anchor < 0) {                                                                                            // 3241\n        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');                                                       // 3242\n        // linear across the month                                                                                   // 3243\n        adjust = (b - anchor) / (anchor - anchor2);                                                                  // 3244\n    } else {                                                                                                         // 3245\n        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');                                                       // 3246\n        // linear across the month                                                                                   // 3247\n        adjust = (b - anchor) / (anchor2 - anchor);                                                                  // 3248\n    }                                                                                                                // 3249\n                                                                                                                     // 3250\n    //check for negative zero, return zero if negative zero                                                          // 3251\n    return -(wholeMonthDiff + adjust) || 0;                                                                          // 3252\n}                                                                                                                    // 3253\n                                                                                                                     // 3254\nhooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';                                                                        // 3255\nhooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';                                                                   // 3256\n                                                                                                                     // 3257\nfunction toString () {                                                                                               // 3258\n    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');                                     // 3259\n}                                                                                                                    // 3260\n                                                                                                                     // 3261\nfunction toISOString() {                                                                                             // 3262\n    if (!this.isValid()) {                                                                                           // 3263\n        return null;                                                                                                 // 3264\n    }                                                                                                                // 3265\n    var m = this.clone().utc();                                                                                      // 3266\n    if (m.year() < 0 || m.year() > 9999) {                                                                           // 3267\n        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                                    // 3268\n    }                                                                                                                // 3269\n    if (isFunction(Date.prototype.toISOString)) {                                                                    // 3270\n        // native implementation is ~50x faster, use it when we can                                                  // 3271\n        return this.toDate().toISOString();                                                                          // 3272\n    }                                                                                                                // 3273\n    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                                          // 3274\n}                                                                                                                    // 3275\n                                                                                                                     // 3276\n/**                                                                                                                  // 3277\n * Return a human readable representation of a moment that can                                                       // 3278\n * also be evaluated to get a new moment which is the same                                                           // 3279\n *                                                                                                                   // 3280\n * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects                   // 3281\n */                                                                                                                  // 3282\nfunction inspect () {                                                                                                // 3283\n    if (!this.isValid()) {                                                                                           // 3284\n        return 'moment.invalid(/* ' + this._i + ' */)';                                                              // 3285\n    }                                                                                                                // 3286\n    var func = 'moment';                                                                                             // 3287\n    var zone = '';                                                                                                   // 3288\n    if (!this.isLocal()) {                                                                                           // 3289\n        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';                                           // 3290\n        zone = 'Z';                                                                                                  // 3291\n    }                                                                                                                // 3292\n    var prefix = '[' + func + '(\"]';                                                                                 // 3293\n    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';                                        // 3294\n    var datetime = '-MM-DD[T]HH:mm:ss.SSS';                                                                          // 3295\n    var suffix = zone + '[\")]';                                                                                      // 3296\n                                                                                                                     // 3297\n    return this.format(prefix + year + datetime + suffix);                                                           // 3298\n}                                                                                                                    // 3299\n                                                                                                                     // 3300\nfunction format (inputString) {                                                                                      // 3301\n    if (!inputString) {                                                                                              // 3302\n        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;                                   // 3303\n    }                                                                                                                // 3304\n    var output = formatMoment(this, inputString);                                                                    // 3305\n    return this.localeData().postformat(output);                                                                     // 3306\n}                                                                                                                    // 3307\n                                                                                                                     // 3308\nfunction from (time, withoutSuffix) {                                                                                // 3309\n    if (this.isValid() &&                                                                                            // 3310\n            ((isMoment(time) && time.isValid()) ||                                                                   // 3311\n             createLocal(time).isValid())) {                                                                         // 3312\n        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);                // 3313\n    } else {                                                                                                         // 3314\n        return this.localeData().invalidDate();                                                                      // 3315\n    }                                                                                                                // 3316\n}                                                                                                                    // 3317\n                                                                                                                     // 3318\nfunction fromNow (withoutSuffix) {                                                                                   // 3319\n    return this.from(createLocal(), withoutSuffix);                                                                  // 3320\n}                                                                                                                    // 3321\n                                                                                                                     // 3322\nfunction to (time, withoutSuffix) {                                                                                  // 3323\n    if (this.isValid() &&                                                                                            // 3324\n            ((isMoment(time) && time.isValid()) ||                                                                   // 3325\n             createLocal(time).isValid())) {                                                                         // 3326\n        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);                // 3327\n    } else {                                                                                                         // 3328\n        return this.localeData().invalidDate();                                                                      // 3329\n    }                                                                                                                // 3330\n}                                                                                                                    // 3331\n                                                                                                                     // 3332\nfunction toNow (withoutSuffix) {                                                                                     // 3333\n    return this.to(createLocal(), withoutSuffix);                                                                    // 3334\n}                                                                                                                    // 3335\n                                                                                                                     // 3336\n// If passed a locale key, it will set the locale for this                                                           // 3337\n// instance.  Otherwise, it will return the locale configuration                                                     // 3338\n// variables for this instance.                                                                                      // 3339\nfunction locale (key) {                                                                                              // 3340\n    var newLocaleData;                                                                                               // 3341\n                                                                                                                     // 3342\n    if (key === undefined) {                                                                                         // 3343\n        return this._locale._abbr;                                                                                   // 3344\n    } else {                                                                                                         // 3345\n        newLocaleData = getLocale(key);                                                                              // 3346\n        if (newLocaleData != null) {                                                                                 // 3347\n            this._locale = newLocaleData;                                                                            // 3348\n        }                                                                                                            // 3349\n        return this;                                                                                                 // 3350\n    }                                                                                                                // 3351\n}                                                                                                                    // 3352\n                                                                                                                     // 3353\nvar lang = deprecate(                                                                                                // 3354\n    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n    function (key) {                                                                                                 // 3356\n        if (key === undefined) {                                                                                     // 3357\n            return this.localeData();                                                                                // 3358\n        } else {                                                                                                     // 3359\n            return this.locale(key);                                                                                 // 3360\n        }                                                                                                            // 3361\n    }                                                                                                                // 3362\n);                                                                                                                   // 3363\n                                                                                                                     // 3364\nfunction localeData () {                                                                                             // 3365\n    return this._locale;                                                                                             // 3366\n}                                                                                                                    // 3367\n                                                                                                                     // 3368\nfunction startOf (units) {                                                                                           // 3369\n    units = normalizeUnits(units);                                                                                   // 3370\n    // the following switch intentionally omits break keywords                                                       // 3371\n    // to utilize falling through the cases.                                                                         // 3372\n    switch (units) {                                                                                                 // 3373\n        case 'year':                                                                                                 // 3374\n            this.month(0);                                                                                           // 3375\n            /* falls through */                                                                                      // 3376\n        case 'quarter':                                                                                              // 3377\n        case 'month':                                                                                                // 3378\n            this.date(1);                                                                                            // 3379\n            /* falls through */                                                                                      // 3380\n        case 'week':                                                                                                 // 3381\n        case 'isoWeek':                                                                                              // 3382\n        case 'day':                                                                                                  // 3383\n        case 'date':                                                                                                 // 3384\n            this.hours(0);                                                                                           // 3385\n            /* falls through */                                                                                      // 3386\n        case 'hour':                                                                                                 // 3387\n            this.minutes(0);                                                                                         // 3388\n            /* falls through */                                                                                      // 3389\n        case 'minute':                                                                                               // 3390\n            this.seconds(0);                                                                                         // 3391\n            /* falls through */                                                                                      // 3392\n        case 'second':                                                                                               // 3393\n            this.milliseconds(0);                                                                                    // 3394\n    }                                                                                                                // 3395\n                                                                                                                     // 3396\n    // weeks are a special case                                                                                      // 3397\n    if (units === 'week') {                                                                                          // 3398\n        this.weekday(0);                                                                                             // 3399\n    }                                                                                                                // 3400\n    if (units === 'isoWeek') {                                                                                       // 3401\n        this.isoWeekday(1);                                                                                          // 3402\n    }                                                                                                                // 3403\n                                                                                                                     // 3404\n    // quarters are also special                                                                                     // 3405\n    if (units === 'quarter') {                                                                                       // 3406\n        this.month(Math.floor(this.month() / 3) * 3);                                                                // 3407\n    }                                                                                                                // 3408\n                                                                                                                     // 3409\n    return this;                                                                                                     // 3410\n}                                                                                                                    // 3411\n                                                                                                                     // 3412\nfunction endOf (units) {                                                                                             // 3413\n    units = normalizeUnits(units);                                                                                   // 3414\n    if (units === undefined || units === 'millisecond') {                                                            // 3415\n        return this;                                                                                                 // 3416\n    }                                                                                                                // 3417\n                                                                                                                     // 3418\n    // 'date' is an alias for 'day', so it should be considered as such.                                             // 3419\n    if (units === 'date') {                                                                                          // 3420\n        units = 'day';                                                                                               // 3421\n    }                                                                                                                // 3422\n                                                                                                                     // 3423\n    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');                     // 3424\n}                                                                                                                    // 3425\n                                                                                                                     // 3426\nfunction valueOf () {                                                                                                // 3427\n    return this._d.valueOf() - ((this._offset || 0) * 60000);                                                        // 3428\n}                                                                                                                    // 3429\n                                                                                                                     // 3430\nfunction unix () {                                                                                                   // 3431\n    return Math.floor(this.valueOf() / 1000);                                                                        // 3432\n}                                                                                                                    // 3433\n                                                                                                                     // 3434\nfunction toDate () {                                                                                                 // 3435\n    return new Date(this.valueOf());                                                                                 // 3436\n}                                                                                                                    // 3437\n                                                                                                                     // 3438\nfunction toArray () {                                                                                                // 3439\n    var m = this;                                                                                                    // 3440\n    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];                       // 3441\n}                                                                                                                    // 3442\n                                                                                                                     // 3443\nfunction toObject () {                                                                                               // 3444\n    var m = this;                                                                                                    // 3445\n    return {                                                                                                         // 3446\n        years: m.year(),                                                                                             // 3447\n        months: m.month(),                                                                                           // 3448\n        date: m.date(),                                                                                              // 3449\n        hours: m.hours(),                                                                                            // 3450\n        minutes: m.minutes(),                                                                                        // 3451\n        seconds: m.seconds(),                                                                                        // 3452\n        milliseconds: m.milliseconds()                                                                               // 3453\n    };                                                                                                               // 3454\n}                                                                                                                    // 3455\n                                                                                                                     // 3456\nfunction toJSON () {                                                                                                 // 3457\n    // new Date(NaN).toJSON() === null                                                                               // 3458\n    return this.isValid() ? this.toISOString() : null;                                                               // 3459\n}                                                                                                                    // 3460\n                                                                                                                     // 3461\nfunction isValid$2 () {                                                                                              // 3462\n    return isValid(this);                                                                                            // 3463\n}                                                                                                                    // 3464\n                                                                                                                     // 3465\nfunction parsingFlags () {                                                                                           // 3466\n    return extend({}, getParsingFlags(this));                                                                        // 3467\n}                                                                                                                    // 3468\n                                                                                                                     // 3469\nfunction invalidAt () {                                                                                              // 3470\n    return getParsingFlags(this).overflow;                                                                           // 3471\n}                                                                                                                    // 3472\n                                                                                                                     // 3473\nfunction creationData() {                                                                                            // 3474\n    return {                                                                                                         // 3475\n        input: this._i,                                                                                              // 3476\n        format: this._f,                                                                                             // 3477\n        locale: this._locale,                                                                                        // 3478\n        isUTC: this._isUTC,                                                                                          // 3479\n        strict: this._strict                                                                                         // 3480\n    };                                                                                                               // 3481\n}                                                                                                                    // 3482\n                                                                                                                     // 3483\n// FORMATTING                                                                                                        // 3484\n                                                                                                                     // 3485\naddFormatToken(0, ['gg', 2], 0, function () {                                                                        // 3486\n    return this.weekYear() % 100;                                                                                    // 3487\n});                                                                                                                  // 3488\n                                                                                                                     // 3489\naddFormatToken(0, ['GG', 2], 0, function () {                                                                        // 3490\n    return this.isoWeekYear() % 100;                                                                                 // 3491\n});                                                                                                                  // 3492\n                                                                                                                     // 3493\nfunction addWeekYearFormatToken (token, getter) {                                                                    // 3494\n    addFormatToken(0, [token, token.length], 0, getter);                                                             // 3495\n}                                                                                                                    // 3496\n                                                                                                                     // 3497\naddWeekYearFormatToken('gggg',     'weekYear');                                                                      // 3498\naddWeekYearFormatToken('ggggg',    'weekYear');                                                                      // 3499\naddWeekYearFormatToken('GGGG',  'isoWeekYear');                                                                      // 3500\naddWeekYearFormatToken('GGGGG', 'isoWeekYear');                                                                      // 3501\n                                                                                                                     // 3502\n// ALIASES                                                                                                           // 3503\n                                                                                                                     // 3504\naddUnitAlias('weekYear', 'gg');                                                                                      // 3505\naddUnitAlias('isoWeekYear', 'GG');                                                                                   // 3506\n                                                                                                                     // 3507\n// PRIORITY                                                                                                          // 3508\n                                                                                                                     // 3509\naddUnitPriority('weekYear', 1);                                                                                      // 3510\naddUnitPriority('isoWeekYear', 1);                                                                                   // 3511\n                                                                                                                     // 3512\n                                                                                                                     // 3513\n// PARSING                                                                                                           // 3514\n                                                                                                                     // 3515\naddRegexToken('G',      matchSigned);                                                                                // 3516\naddRegexToken('g',      matchSigned);                                                                                // 3517\naddRegexToken('GG',     match1to2, match2);                                                                          // 3518\naddRegexToken('gg',     match1to2, match2);                                                                          // 3519\naddRegexToken('GGGG',   match1to4, match4);                                                                          // 3520\naddRegexToken('gggg',   match1to4, match4);                                                                          // 3521\naddRegexToken('GGGGG',  match1to6, match6);                                                                          // 3522\naddRegexToken('ggggg',  match1to6, match6);                                                                          // 3523\n                                                                                                                     // 3524\naddWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {                        // 3525\n    week[token.substr(0, 2)] = toInt(input);                                                                         // 3526\n});                                                                                                                  // 3527\n                                                                                                                     // 3528\naddWeekParseToken(['gg', 'GG'], function (input, week, config, token) {                                              // 3529\n    week[token] = hooks.parseTwoDigitYear(input);                                                                    // 3530\n});                                                                                                                  // 3531\n                                                                                                                     // 3532\n// MOMENTS                                                                                                           // 3533\n                                                                                                                     // 3534\nfunction getSetWeekYear (input) {                                                                                    // 3535\n    return getSetWeekYearHelper.call(this,                                                                           // 3536\n            input,                                                                                                   // 3537\n            this.week(),                                                                                             // 3538\n            this.weekday(),                                                                                          // 3539\n            this.localeData()._week.dow,                                                                             // 3540\n            this.localeData()._week.doy);                                                                            // 3541\n}                                                                                                                    // 3542\n                                                                                                                     // 3543\nfunction getSetISOWeekYear (input) {                                                                                 // 3544\n    return getSetWeekYearHelper.call(this,                                                                           // 3545\n            input, this.isoWeek(), this.isoWeekday(), 1, 4);                                                         // 3546\n}                                                                                                                    // 3547\n                                                                                                                     // 3548\nfunction getISOWeeksInYear () {                                                                                      // 3549\n    return weeksInYear(this.year(), 1, 4);                                                                           // 3550\n}                                                                                                                    // 3551\n                                                                                                                     // 3552\nfunction getWeeksInYear () {                                                                                         // 3553\n    var weekInfo = this.localeData()._week;                                                                          // 3554\n    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);                                                     // 3555\n}                                                                                                                    // 3556\n                                                                                                                     // 3557\nfunction getSetWeekYearHelper(input, week, weekday, dow, doy) {                                                      // 3558\n    var weeksTarget;                                                                                                 // 3559\n    if (input == null) {                                                                                             // 3560\n        return weekOfYear(this, dow, doy).year;                                                                      // 3561\n    } else {                                                                                                         // 3562\n        weeksTarget = weeksInYear(input, dow, doy);                                                                  // 3563\n        if (week > weeksTarget) {                                                                                    // 3564\n            week = weeksTarget;                                                                                      // 3565\n        }                                                                                                            // 3566\n        return setWeekAll.call(this, input, week, weekday, dow, doy);                                                // 3567\n    }                                                                                                                // 3568\n}                                                                                                                    // 3569\n                                                                                                                     // 3570\nfunction setWeekAll(weekYear, week, weekday, dow, doy) {                                                             // 3571\n    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),                                       // 3572\n        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);                                        // 3573\n                                                                                                                     // 3574\n    this.year(date.getUTCFullYear());                                                                                // 3575\n    this.month(date.getUTCMonth());                                                                                  // 3576\n    this.date(date.getUTCDate());                                                                                    // 3577\n    return this;                                                                                                     // 3578\n}                                                                                                                    // 3579\n                                                                                                                     // 3580\n// FORMATTING                                                                                                        // 3581\n                                                                                                                     // 3582\naddFormatToken('Q', 0, 'Qo', 'quarter');                                                                             // 3583\n                                                                                                                     // 3584\n// ALIASES                                                                                                           // 3585\n                                                                                                                     // 3586\naddUnitAlias('quarter', 'Q');                                                                                        // 3587\n                                                                                                                     // 3588\n// PRIORITY                                                                                                          // 3589\n                                                                                                                     // 3590\naddUnitPriority('quarter', 7);                                                                                       // 3591\n                                                                                                                     // 3592\n// PARSING                                                                                                           // 3593\n                                                                                                                     // 3594\naddRegexToken('Q', match1);                                                                                          // 3595\naddParseToken('Q', function (input, array) {                                                                         // 3596\n    array[MONTH] = (toInt(input) - 1) * 3;                                                                           // 3597\n});                                                                                                                  // 3598\n                                                                                                                     // 3599\n// MOMENTS                                                                                                           // 3600\n                                                                                                                     // 3601\nfunction getSetQuarter (input) {                                                                                     // 3602\n    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);       // 3603\n}                                                                                                                    // 3604\n                                                                                                                     // 3605\n// FORMATTING                                                                                                        // 3606\n                                                                                                                     // 3607\naddFormatToken('D', ['DD', 2], 'Do', 'date');                                                                        // 3608\n                                                                                                                     // 3609\n// ALIASES                                                                                                           // 3610\n                                                                                                                     // 3611\naddUnitAlias('date', 'D');                                                                                           // 3612\n                                                                                                                     // 3613\n// PRIOROITY                                                                                                         // 3614\naddUnitPriority('date', 9);                                                                                          // 3615\n                                                                                                                     // 3616\n// PARSING                                                                                                           // 3617\n                                                                                                                     // 3618\naddRegexToken('D',  match1to2);                                                                                      // 3619\naddRegexToken('DD', match1to2, match2);                                                                              // 3620\naddRegexToken('Do', function (isStrict, locale) {                                                                    // 3621\n    // TODO: Remove \"ordinalParse\" fallback in next major release.                                                   // 3622\n    return isStrict ?                                                                                                // 3623\n      (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :                                                     // 3624\n      locale._dayOfMonthOrdinalParseLenient;                                                                         // 3625\n});                                                                                                                  // 3626\n                                                                                                                     // 3627\naddParseToken(['D', 'DD'], DATE);                                                                                    // 3628\naddParseToken('Do', function (input, array) {                                                                        // 3629\n    array[DATE] = toInt(input.match(match1to2)[0], 10);                                                              // 3630\n});                                                                                                                  // 3631\n                                                                                                                     // 3632\n// MOMENTS                                                                                                           // 3633\n                                                                                                                     // 3634\nvar getSetDayOfMonth = makeGetSet('Date', true);                                                                     // 3635\n                                                                                                                     // 3636\n// FORMATTING                                                                                                        // 3637\n                                                                                                                     // 3638\naddFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');                                                             // 3639\n                                                                                                                     // 3640\n// ALIASES                                                                                                           // 3641\n                                                                                                                     // 3642\naddUnitAlias('dayOfYear', 'DDD');                                                                                    // 3643\n                                                                                                                     // 3644\n// PRIORITY                                                                                                          // 3645\naddUnitPriority('dayOfYear', 4);                                                                                     // 3646\n                                                                                                                     // 3647\n// PARSING                                                                                                           // 3648\n                                                                                                                     // 3649\naddRegexToken('DDD',  match1to3);                                                                                    // 3650\naddRegexToken('DDDD', match3);                                                                                       // 3651\naddParseToken(['DDD', 'DDDD'], function (input, array, config) {                                                     // 3652\n    config._dayOfYear = toInt(input);                                                                                // 3653\n});                                                                                                                  // 3654\n                                                                                                                     // 3655\n// HELPERS                                                                                                           // 3656\n                                                                                                                     // 3657\n// MOMENTS                                                                                                           // 3658\n                                                                                                                     // 3659\nfunction getSetDayOfYear (input) {                                                                                   // 3660\n    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;            // 3661\n    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');                                           // 3662\n}                                                                                                                    // 3663\n                                                                                                                     // 3664\n// FORMATTING                                                                                                        // 3665\n                                                                                                                     // 3666\naddFormatToken('m', ['mm', 2], 0, 'minute');                                                                         // 3667\n                                                                                                                     // 3668\n// ALIASES                                                                                                           // 3669\n                                                                                                                     // 3670\naddUnitAlias('minute', 'm');                                                                                         // 3671\n                                                                                                                     // 3672\n// PRIORITY                                                                                                          // 3673\n                                                                                                                     // 3674\naddUnitPriority('minute', 14);                                                                                       // 3675\n                                                                                                                     // 3676\n// PARSING                                                                                                           // 3677\n                                                                                                                     // 3678\naddRegexToken('m',  match1to2);                                                                                      // 3679\naddRegexToken('mm', match1to2, match2);                                                                              // 3680\naddParseToken(['m', 'mm'], MINUTE);                                                                                  // 3681\n                                                                                                                     // 3682\n// MOMENTS                                                                                                           // 3683\n                                                                                                                     // 3684\nvar getSetMinute = makeGetSet('Minutes', false);                                                                     // 3685\n                                                                                                                     // 3686\n// FORMATTING                                                                                                        // 3687\n                                                                                                                     // 3688\naddFormatToken('s', ['ss', 2], 0, 'second');                                                                         // 3689\n                                                                                                                     // 3690\n// ALIASES                                                                                                           // 3691\n                                                                                                                     // 3692\naddUnitAlias('second', 's');                                                                                         // 3693\n                                                                                                                     // 3694\n// PRIORITY                                                                                                          // 3695\n                                                                                                                     // 3696\naddUnitPriority('second', 15);                                                                                       // 3697\n                                                                                                                     // 3698\n// PARSING                                                                                                           // 3699\n                                                                                                                     // 3700\naddRegexToken('s',  match1to2);                                                                                      // 3701\naddRegexToken('ss', match1to2, match2);                                                                              // 3702\naddParseToken(['s', 'ss'], SECOND);                                                                                  // 3703\n                                                                                                                     // 3704\n// MOMENTS                                                                                                           // 3705\n                                                                                                                     // 3706\nvar getSetSecond = makeGetSet('Seconds', false);                                                                     // 3707\n                                                                                                                     // 3708\n// FORMATTING                                                                                                        // 3709\n                                                                                                                     // 3710\naddFormatToken('S', 0, 0, function () {                                                                              // 3711\n    return ~~(this.millisecond() / 100);                                                                             // 3712\n});                                                                                                                  // 3713\n                                                                                                                     // 3714\naddFormatToken(0, ['SS', 2], 0, function () {                                                                        // 3715\n    return ~~(this.millisecond() / 10);                                                                              // 3716\n});                                                                                                                  // 3717\n                                                                                                                     // 3718\naddFormatToken(0, ['SSS', 3], 0, 'millisecond');                                                                     // 3719\naddFormatToken(0, ['SSSS', 4], 0, function () {                                                                      // 3720\n    return this.millisecond() * 10;                                                                                  // 3721\n});                                                                                                                  // 3722\naddFormatToken(0, ['SSSSS', 5], 0, function () {                                                                     // 3723\n    return this.millisecond() * 100;                                                                                 // 3724\n});                                                                                                                  // 3725\naddFormatToken(0, ['SSSSSS', 6], 0, function () {                                                                    // 3726\n    return this.millisecond() * 1000;                                                                                // 3727\n});                                                                                                                  // 3728\naddFormatToken(0, ['SSSSSSS', 7], 0, function () {                                                                   // 3729\n    return this.millisecond() * 10000;                                                                               // 3730\n});                                                                                                                  // 3731\naddFormatToken(0, ['SSSSSSSS', 8], 0, function () {                                                                  // 3732\n    return this.millisecond() * 100000;                                                                              // 3733\n});                                                                                                                  // 3734\naddFormatToken(0, ['SSSSSSSSS', 9], 0, function () {                                                                 // 3735\n    return this.millisecond() * 1000000;                                                                             // 3736\n});                                                                                                                  // 3737\n                                                                                                                     // 3738\n                                                                                                                     // 3739\n// ALIASES                                                                                                           // 3740\n                                                                                                                     // 3741\naddUnitAlias('millisecond', 'ms');                                                                                   // 3742\n                                                                                                                     // 3743\n// PRIORITY                                                                                                          // 3744\n                                                                                                                     // 3745\naddUnitPriority('millisecond', 16);                                                                                  // 3746\n                                                                                                                     // 3747\n// PARSING                                                                                                           // 3748\n                                                                                                                     // 3749\naddRegexToken('S',    match1to3, match1);                                                                            // 3750\naddRegexToken('SS',   match1to3, match2);                                                                            // 3751\naddRegexToken('SSS',  match1to3, match3);                                                                            // 3752\n                                                                                                                     // 3753\nvar token;                                                                                                           // 3754\nfor (token = 'SSSS'; token.length <= 9; token += 'S') {                                                              // 3755\n    addRegexToken(token, matchUnsigned);                                                                             // 3756\n}                                                                                                                    // 3757\n                                                                                                                     // 3758\nfunction parseMs(input, array) {                                                                                     // 3759\n    array[MILLISECOND] = toInt(('0.' + input) * 1000);                                                               // 3760\n}                                                                                                                    // 3761\n                                                                                                                     // 3762\nfor (token = 'S'; token.length <= 9; token += 'S') {                                                                 // 3763\n    addParseToken(token, parseMs);                                                                                   // 3764\n}                                                                                                                    // 3765\n// MOMENTS                                                                                                           // 3766\n                                                                                                                     // 3767\nvar getSetMillisecond = makeGetSet('Milliseconds', false);                                                           // 3768\n                                                                                                                     // 3769\n// FORMATTING                                                                                                        // 3770\n                                                                                                                     // 3771\naddFormatToken('z',  0, 0, 'zoneAbbr');                                                                              // 3772\naddFormatToken('zz', 0, 0, 'zoneName');                                                                              // 3773\n                                                                                                                     // 3774\n// MOMENTS                                                                                                           // 3775\n                                                                                                                     // 3776\nfunction getZoneAbbr () {                                                                                            // 3777\n    return this._isUTC ? 'UTC' : '';                                                                                 // 3778\n}                                                                                                                    // 3779\n                                                                                                                     // 3780\nfunction getZoneName () {                                                                                            // 3781\n    return this._isUTC ? 'Coordinated Universal Time' : '';                                                          // 3782\n}                                                                                                                    // 3783\n                                                                                                                     // 3784\nvar proto = Moment.prototype;                                                                                        // 3785\n                                                                                                                     // 3786\nproto.add               = add;                                                                                       // 3787\nproto.calendar          = calendar$1;                                                                                // 3788\nproto.clone             = clone;                                                                                     // 3789\nproto.diff              = diff;                                                                                      // 3790\nproto.endOf             = endOf;                                                                                     // 3791\nproto.format            = format;                                                                                    // 3792\nproto.from              = from;                                                                                      // 3793\nproto.fromNow           = fromNow;                                                                                   // 3794\nproto.to                = to;                                                                                        // 3795\nproto.toNow             = toNow;                                                                                     // 3796\nproto.get               = stringGet;                                                                                 // 3797\nproto.invalidAt         = invalidAt;                                                                                 // 3798\nproto.isAfter           = isAfter;                                                                                   // 3799\nproto.isBefore          = isBefore;                                                                                  // 3800\nproto.isBetween         = isBetween;                                                                                 // 3801\nproto.isSame            = isSame;                                                                                    // 3802\nproto.isSameOrAfter     = isSameOrAfter;                                                                             // 3803\nproto.isSameOrBefore    = isSameOrBefore;                                                                            // 3804\nproto.isValid           = isValid$2;                                                                                 // 3805\nproto.lang              = lang;                                                                                      // 3806\nproto.locale            = locale;                                                                                    // 3807\nproto.localeData        = localeData;                                                                                // 3808\nproto.max               = prototypeMax;                                                                              // 3809\nproto.min               = prototypeMin;                                                                              // 3810\nproto.parsingFlags      = parsingFlags;                                                                              // 3811\nproto.set               = stringSet;                                                                                 // 3812\nproto.startOf           = startOf;                                                                                   // 3813\nproto.subtract          = subtract;                                                                                  // 3814\nproto.toArray           = toArray;                                                                                   // 3815\nproto.toObject          = toObject;                                                                                  // 3816\nproto.toDate            = toDate;                                                                                    // 3817\nproto.toISOString       = toISOString;                                                                               // 3818\nproto.inspect           = inspect;                                                                                   // 3819\nproto.toJSON            = toJSON;                                                                                    // 3820\nproto.toString          = toString;                                                                                  // 3821\nproto.unix              = unix;                                                                                      // 3822\nproto.valueOf           = valueOf;                                                                                   // 3823\nproto.creationData      = creationData;                                                                              // 3824\n                                                                                                                     // 3825\n// Year                                                                                                              // 3826\nproto.year       = getSetYear;                                                                                       // 3827\nproto.isLeapYear = getIsLeapYear;                                                                                    // 3828\n                                                                                                                     // 3829\n// Week Year                                                                                                         // 3830\nproto.weekYear    = getSetWeekYear;                                                                                  // 3831\nproto.isoWeekYear = getSetISOWeekYear;                                                                               // 3832\n                                                                                                                     // 3833\n// Quarter                                                                                                           // 3834\nproto.quarter = proto.quarters = getSetQuarter;                                                                      // 3835\n                                                                                                                     // 3836\n// Month                                                                                                             // 3837\nproto.month       = getSetMonth;                                                                                     // 3838\nproto.daysInMonth = getDaysInMonth;                                                                                  // 3839\n                                                                                                                     // 3840\n// Week                                                                                                              // 3841\nproto.week           = proto.weeks        = getSetWeek;                                                              // 3842\nproto.isoWeek        = proto.isoWeeks     = getSetISOWeek;                                                           // 3843\nproto.weeksInYear    = getWeeksInYear;                                                                               // 3844\nproto.isoWeeksInYear = getISOWeeksInYear;                                                                            // 3845\n                                                                                                                     // 3846\n// Day                                                                                                               // 3847\nproto.date       = getSetDayOfMonth;                                                                                 // 3848\nproto.day        = proto.days             = getSetDayOfWeek;                                                         // 3849\nproto.weekday    = getSetLocaleDayOfWeek;                                                                            // 3850\nproto.isoWeekday = getSetISODayOfWeek;                                                                               // 3851\nproto.dayOfYear  = getSetDayOfYear;                                                                                  // 3852\n                                                                                                                     // 3853\n// Hour                                                                                                              // 3854\nproto.hour = proto.hours = getSetHour;                                                                               // 3855\n                                                                                                                     // 3856\n// Minute                                                                                                            // 3857\nproto.minute = proto.minutes = getSetMinute;                                                                         // 3858\n                                                                                                                     // 3859\n// Second                                                                                                            // 3860\nproto.second = proto.seconds = getSetSecond;                                                                         // 3861\n                                                                                                                     // 3862\n// Millisecond                                                                                                       // 3863\nproto.millisecond = proto.milliseconds = getSetMillisecond;                                                          // 3864\n                                                                                                                     // 3865\n// Offset                                                                                                            // 3866\nproto.utcOffset            = getSetOffset;                                                                           // 3867\nproto.utc                  = setOffsetToUTC;                                                                         // 3868\nproto.local                = setOffsetToLocal;                                                                       // 3869\nproto.parseZone            = setOffsetToParsedOffset;                                                                // 3870\nproto.hasAlignedHourOffset = hasAlignedHourOffset;                                                                   // 3871\nproto.isDST                = isDaylightSavingTime;                                                                   // 3872\nproto.isLocal              = isLocal;                                                                                // 3873\nproto.isUtcOffset          = isUtcOffset;                                                                            // 3874\nproto.isUtc                = isUtc;                                                                                  // 3875\nproto.isUTC                = isUtc;                                                                                  // 3876\n                                                                                                                     // 3877\n// Timezone                                                                                                          // 3878\nproto.zoneAbbr = getZoneAbbr;                                                                                        // 3879\nproto.zoneName = getZoneName;                                                                                        // 3880\n                                                                                                                     // 3881\n// Deprecations                                                                                                      // 3882\nproto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);                       // 3883\nproto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);                           // 3884\nproto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);                              // 3885\nproto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\nproto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n                                                                                                                     // 3888\nfunction createUnix (input) {                                                                                        // 3889\n    return createLocal(input * 1000);                                                                                // 3890\n}                                                                                                                    // 3891\n                                                                                                                     // 3892\nfunction createInZone () {                                                                                           // 3893\n    return createLocal.apply(null, arguments).parseZone();                                                           // 3894\n}                                                                                                                    // 3895\n                                                                                                                     // 3896\nfunction preParsePostFormat (string) {                                                                               // 3897\n    return string;                                                                                                   // 3898\n}                                                                                                                    // 3899\n                                                                                                                     // 3900\nvar proto$1 = Locale.prototype;                                                                                      // 3901\n                                                                                                                     // 3902\nproto$1.calendar        = calendar;                                                                                  // 3903\nproto$1.longDateFormat  = longDateFormat;                                                                            // 3904\nproto$1.invalidDate     = invalidDate;                                                                               // 3905\nproto$1.ordinal         = ordinal;                                                                                   // 3906\nproto$1.preparse        = preParsePostFormat;                                                                        // 3907\nproto$1.postformat      = preParsePostFormat;                                                                        // 3908\nproto$1.relativeTime    = relativeTime;                                                                              // 3909\nproto$1.pastFuture      = pastFuture;                                                                                // 3910\nproto$1.set             = set;                                                                                       // 3911\n                                                                                                                     // 3912\n// Month                                                                                                             // 3913\nproto$1.months            =        localeMonths;                                                                     // 3914\nproto$1.monthsShort       =        localeMonthsShort;                                                                // 3915\nproto$1.monthsParse       =        localeMonthsParse;                                                                // 3916\nproto$1.monthsRegex       = monthsRegex;                                                                             // 3917\nproto$1.monthsShortRegex  = monthsShortRegex;                                                                        // 3918\n                                                                                                                     // 3919\n// Week                                                                                                              // 3920\nproto$1.week = localeWeek;                                                                                           // 3921\nproto$1.firstDayOfYear = localeFirstDayOfYear;                                                                       // 3922\nproto$1.firstDayOfWeek = localeFirstDayOfWeek;                                                                       // 3923\n                                                                                                                     // 3924\n// Day of Week                                                                                                       // 3925\nproto$1.weekdays       =        localeWeekdays;                                                                      // 3926\nproto$1.weekdaysMin    =        localeWeekdaysMin;                                                                   // 3927\nproto$1.weekdaysShort  =        localeWeekdaysShort;                                                                 // 3928\nproto$1.weekdaysParse  =        localeWeekdaysParse;                                                                 // 3929\n                                                                                                                     // 3930\nproto$1.weekdaysRegex       =        weekdaysRegex;                                                                  // 3931\nproto$1.weekdaysShortRegex  =        weekdaysShortRegex;                                                             // 3932\nproto$1.weekdaysMinRegex    =        weekdaysMinRegex;                                                               // 3933\n                                                                                                                     // 3934\n// Hours                                                                                                             // 3935\nproto$1.isPM = localeIsPM;                                                                                           // 3936\nproto$1.meridiem = localeMeridiem;                                                                                   // 3937\n                                                                                                                     // 3938\nfunction get$1 (format, index, field, setter) {                                                                      // 3939\n    var locale = getLocale();                                                                                        // 3940\n    var utc = createUTC().set(setter, index);                                                                        // 3941\n    return locale[field](utc, format);                                                                               // 3942\n}                                                                                                                    // 3943\n                                                                                                                     // 3944\nfunction listMonthsImpl (format, index, field) {                                                                     // 3945\n    if (isNumber(format)) {                                                                                          // 3946\n        index = format;                                                                                              // 3947\n        format = undefined;                                                                                          // 3948\n    }                                                                                                                // 3949\n                                                                                                                     // 3950\n    format = format || '';                                                                                           // 3951\n                                                                                                                     // 3952\n    if (index != null) {                                                                                             // 3953\n        return get$1(format, index, field, 'month');                                                                 // 3954\n    }                                                                                                                // 3955\n                                                                                                                     // 3956\n    var i;                                                                                                           // 3957\n    var out = [];                                                                                                    // 3958\n    for (i = 0; i < 12; i++) {                                                                                       // 3959\n        out[i] = get$1(format, i, field, 'month');                                                                   // 3960\n    }                                                                                                                // 3961\n    return out;                                                                                                      // 3962\n}                                                                                                                    // 3963\n                                                                                                                     // 3964\n// ()                                                                                                                // 3965\n// (5)                                                                                                               // 3966\n// (fmt, 5)                                                                                                          // 3967\n// (fmt)                                                                                                             // 3968\n// (true)                                                                                                            // 3969\n// (true, 5)                                                                                                         // 3970\n// (true, fmt, 5)                                                                                                    // 3971\n// (true, fmt)                                                                                                       // 3972\nfunction listWeekdaysImpl (localeSorted, format, index, field) {                                                     // 3973\n    if (typeof localeSorted === 'boolean') {                                                                         // 3974\n        if (isNumber(format)) {                                                                                      // 3975\n            index = format;                                                                                          // 3976\n            format = undefined;                                                                                      // 3977\n        }                                                                                                            // 3978\n                                                                                                                     // 3979\n        format = format || '';                                                                                       // 3980\n    } else {                                                                                                         // 3981\n        format = localeSorted;                                                                                       // 3982\n        index = format;                                                                                              // 3983\n        localeSorted = false;                                                                                        // 3984\n                                                                                                                     // 3985\n        if (isNumber(format)) {                                                                                      // 3986\n            index = format;                                                                                          // 3987\n            format = undefined;                                                                                      // 3988\n        }                                                                                                            // 3989\n                                                                                                                     // 3990\n        format = format || '';                                                                                       // 3991\n    }                                                                                                                // 3992\n                                                                                                                     // 3993\n    var locale = getLocale(),                                                                                        // 3994\n        shift = localeSorted ? locale._week.dow : 0;                                                                 // 3995\n                                                                                                                     // 3996\n    if (index != null) {                                                                                             // 3997\n        return get$1(format, (index + shift) % 7, field, 'day');                                                     // 3998\n    }                                                                                                                // 3999\n                                                                                                                     // 4000\n    var i;                                                                                                           // 4001\n    var out = [];                                                                                                    // 4002\n    for (i = 0; i < 7; i++) {                                                                                        // 4003\n        out[i] = get$1(format, (i + shift) % 7, field, 'day');                                                       // 4004\n    }                                                                                                                // 4005\n    return out;                                                                                                      // 4006\n}                                                                                                                    // 4007\n                                                                                                                     // 4008\nfunction listMonths (format, index) {                                                                                // 4009\n    return listMonthsImpl(format, index, 'months');                                                                  // 4010\n}                                                                                                                    // 4011\n                                                                                                                     // 4012\nfunction listMonthsShort (format, index) {                                                                           // 4013\n    return listMonthsImpl(format, index, 'monthsShort');                                                             // 4014\n}                                                                                                                    // 4015\n                                                                                                                     // 4016\nfunction listWeekdays (localeSorted, format, index) {                                                                // 4017\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');                                                // 4018\n}                                                                                                                    // 4019\n                                                                                                                     // 4020\nfunction listWeekdaysShort (localeSorted, format, index) {                                                           // 4021\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');                                           // 4022\n}                                                                                                                    // 4023\n                                                                                                                     // 4024\nfunction listWeekdaysMin (localeSorted, format, index) {                                                             // 4025\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');                                             // 4026\n}                                                                                                                    // 4027\n                                                                                                                     // 4028\ngetSetGlobalLocale('en', {                                                                                           // 4029\n    dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,                                                                  // 4030\n    ordinal : function (number) {                                                                                    // 4031\n        var b = number % 10,                                                                                         // 4032\n            output = (toInt(number % 100 / 10) === 1) ? 'th' :                                                       // 4033\n            (b === 1) ? 'st' :                                                                                       // 4034\n            (b === 2) ? 'nd' :                                                                                       // 4035\n            (b === 3) ? 'rd' : 'th';                                                                                 // 4036\n        return number + output;                                                                                      // 4037\n    }                                                                                                                // 4038\n});                                                                                                                  // 4039\n                                                                                                                     // 4040\n// Side effect imports                                                                                               // 4041\nhooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);                 // 4042\nhooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);              // 4043\n                                                                                                                     // 4044\nvar mathAbs = Math.abs;                                                                                              // 4045\n                                                                                                                     // 4046\nfunction abs () {                                                                                                    // 4047\n    var data           = this._data;                                                                                 // 4048\n                                                                                                                     // 4049\n    this._milliseconds = mathAbs(this._milliseconds);                                                                // 4050\n    this._days         = mathAbs(this._days);                                                                        // 4051\n    this._months       = mathAbs(this._months);                                                                      // 4052\n                                                                                                                     // 4053\n    data.milliseconds  = mathAbs(data.milliseconds);                                                                 // 4054\n    data.seconds       = mathAbs(data.seconds);                                                                      // 4055\n    data.minutes       = mathAbs(data.minutes);                                                                      // 4056\n    data.hours         = mathAbs(data.hours);                                                                        // 4057\n    data.months        = mathAbs(data.months);                                                                       // 4058\n    data.years         = mathAbs(data.years);                                                                        // 4059\n                                                                                                                     // 4060\n    return this;                                                                                                     // 4061\n}                                                                                                                    // 4062\n                                                                                                                     // 4063\nfunction addSubtract$1 (duration, input, value, direction) {                                                         // 4064\n    var other = createDuration(input, value);                                                                        // 4065\n                                                                                                                     // 4066\n    duration._milliseconds += direction * other._milliseconds;                                                       // 4067\n    duration._days         += direction * other._days;                                                               // 4068\n    duration._months       += direction * other._months;                                                             // 4069\n                                                                                                                     // 4070\n    return duration._bubble();                                                                                       // 4071\n}                                                                                                                    // 4072\n                                                                                                                     // 4073\n// supports only 2.0-style add(1, 's') or add(duration)                                                              // 4074\nfunction add$1 (input, value) {                                                                                      // 4075\n    return addSubtract$1(this, input, value, 1);                                                                     // 4076\n}                                                                                                                    // 4077\n                                                                                                                     // 4078\n// supports only 2.0-style subtract(1, 's') or subtract(duration)                                                    // 4079\nfunction subtract$1 (input, value) {                                                                                 // 4080\n    return addSubtract$1(this, input, value, -1);                                                                    // 4081\n}                                                                                                                    // 4082\n                                                                                                                     // 4083\nfunction absCeil (number) {                                                                                          // 4084\n    if (number < 0) {                                                                                                // 4085\n        return Math.floor(number);                                                                                   // 4086\n    } else {                                                                                                         // 4087\n        return Math.ceil(number);                                                                                    // 4088\n    }                                                                                                                // 4089\n}                                                                                                                    // 4090\n                                                                                                                     // 4091\nfunction bubble () {                                                                                                 // 4092\n    var milliseconds = this._milliseconds;                                                                           // 4093\n    var days         = this._days;                                                                                   // 4094\n    var months       = this._months;                                                                                 // 4095\n    var data         = this._data;                                                                                   // 4096\n    var seconds, minutes, hours, years, monthsFromDays;                                                              // 4097\n                                                                                                                     // 4098\n    // if we have a mix of positive and negative values, bubble down first                                           // 4099\n    // check: https://github.com/moment/moment/issues/2166                                                           // 4100\n    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||                                                         // 4101\n            (milliseconds <= 0 && days <= 0 && months <= 0))) {                                                      // 4102\n        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;                                                // 4103\n        days = 0;                                                                                                    // 4104\n        months = 0;                                                                                                  // 4105\n    }                                                                                                                // 4106\n                                                                                                                     // 4107\n    // The following code bubbles up values, see the tests for                                                       // 4108\n    // examples of what that means.                                                                                  // 4109\n    data.milliseconds = milliseconds % 1000;                                                                         // 4110\n                                                                                                                     // 4111\n    seconds           = absFloor(milliseconds / 1000);                                                               // 4112\n    data.seconds      = seconds % 60;                                                                                // 4113\n                                                                                                                     // 4114\n    minutes           = absFloor(seconds / 60);                                                                      // 4115\n    data.minutes      = minutes % 60;                                                                                // 4116\n                                                                                                                     // 4117\n    hours             = absFloor(minutes / 60);                                                                      // 4118\n    data.hours        = hours % 24;                                                                                  // 4119\n                                                                                                                     // 4120\n    days += absFloor(hours / 24);                                                                                    // 4121\n                                                                                                                     // 4122\n    // convert days to months                                                                                        // 4123\n    monthsFromDays = absFloor(daysToMonths(days));                                                                   // 4124\n    months += monthsFromDays;                                                                                        // 4125\n    days -= absCeil(monthsToDays(monthsFromDays));                                                                   // 4126\n                                                                                                                     // 4127\n    // 12 months -> 1 year                                                                                           // 4128\n    years = absFloor(months / 12);                                                                                   // 4129\n    months %= 12;                                                                                                    // 4130\n                                                                                                                     // 4131\n    data.days   = days;                                                                                              // 4132\n    data.months = months;                                                                                            // 4133\n    data.years  = years;                                                                                             // 4134\n                                                                                                                     // 4135\n    return this;                                                                                                     // 4136\n}                                                                                                                    // 4137\n                                                                                                                     // 4138\nfunction daysToMonths (days) {                                                                                       // 4139\n    // 400 years have 146097 days (taking into account leap year rules)                                              // 4140\n    // 400 years have 12 months === 4800                                                                             // 4141\n    return days * 4800 / 146097;                                                                                     // 4142\n}                                                                                                                    // 4143\n                                                                                                                     // 4144\nfunction monthsToDays (months) {                                                                                     // 4145\n    // the reverse of daysToMonths                                                                                   // 4146\n    return months * 146097 / 4800;                                                                                   // 4147\n}                                                                                                                    // 4148\n                                                                                                                     // 4149\nfunction as (units) {                                                                                                // 4150\n    if (!this.isValid()) {                                                                                           // 4151\n        return NaN;                                                                                                  // 4152\n    }                                                                                                                // 4153\n    var days;                                                                                                        // 4154\n    var months;                                                                                                      // 4155\n    var milliseconds = this._milliseconds;                                                                           // 4156\n                                                                                                                     // 4157\n    units = normalizeUnits(units);                                                                                   // 4158\n                                                                                                                     // 4159\n    if (units === 'month' || units === 'year') {                                                                     // 4160\n        days   = this._days   + milliseconds / 864e5;                                                                // 4161\n        months = this._months + daysToMonths(days);                                                                  // 4162\n        return units === 'month' ? months : months / 12;                                                             // 4163\n    } else {                                                                                                         // 4164\n        // handle milliseconds separately because of floating point math errors (issue #1867)                        // 4165\n        days = this._days + Math.round(monthsToDays(this._months));                                                  // 4166\n        switch (units) {                                                                                             // 4167\n            case 'week'   : return days / 7     + milliseconds / 6048e5;                                             // 4168\n            case 'day'    : return days         + milliseconds / 864e5;                                              // 4169\n            case 'hour'   : return days * 24    + milliseconds / 36e5;                                               // 4170\n            case 'minute' : return days * 1440  + milliseconds / 6e4;                                                // 4171\n            case 'second' : return days * 86400 + milliseconds / 1000;                                               // 4172\n            // Math.floor prevents floating point math errors here                                                   // 4173\n            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;                                      // 4174\n            default: throw new Error('Unknown unit ' + units);                                                       // 4175\n        }                                                                                                            // 4176\n    }                                                                                                                // 4177\n}                                                                                                                    // 4178\n                                                                                                                     // 4179\n// TODO: Use this.as('ms')?                                                                                          // 4180\nfunction valueOf$1 () {                                                                                              // 4181\n    if (!this.isValid()) {                                                                                           // 4182\n        return NaN;                                                                                                  // 4183\n    }                                                                                                                // 4184\n    return (                                                                                                         // 4185\n        this._milliseconds +                                                                                         // 4186\n        this._days * 864e5 +                                                                                         // 4187\n        (this._months % 12) * 2592e6 +                                                                               // 4188\n        toInt(this._months / 12) * 31536e6                                                                           // 4189\n    );                                                                                                               // 4190\n}                                                                                                                    // 4191\n                                                                                                                     // 4192\nfunction makeAs (alias) {                                                                                            // 4193\n    return function () {                                                                                             // 4194\n        return this.as(alias);                                                                                       // 4195\n    };                                                                                                               // 4196\n}                                                                                                                    // 4197\n                                                                                                                     // 4198\nvar asMilliseconds = makeAs('ms');                                                                                   // 4199\nvar asSeconds      = makeAs('s');                                                                                    // 4200\nvar asMinutes      = makeAs('m');                                                                                    // 4201\nvar asHours        = makeAs('h');                                                                                    // 4202\nvar asDays         = makeAs('d');                                                                                    // 4203\nvar asWeeks        = makeAs('w');                                                                                    // 4204\nvar asMonths       = makeAs('M');                                                                                    // 4205\nvar asYears        = makeAs('y');                                                                                    // 4206\n                                                                                                                     // 4207\nfunction get$2 (units) {                                                                                             // 4208\n    units = normalizeUnits(units);                                                                                   // 4209\n    return this.isValid() ? this[units + 's']() : NaN;                                                               // 4210\n}                                                                                                                    // 4211\n                                                                                                                     // 4212\nfunction makeGetter(name) {                                                                                          // 4213\n    return function () {                                                                                             // 4214\n        return this.isValid() ? this._data[name] : NaN;                                                              // 4215\n    };                                                                                                               // 4216\n}                                                                                                                    // 4217\n                                                                                                                     // 4218\nvar milliseconds = makeGetter('milliseconds');                                                                       // 4219\nvar seconds      = makeGetter('seconds');                                                                            // 4220\nvar minutes      = makeGetter('minutes');                                                                            // 4221\nvar hours        = makeGetter('hours');                                                                              // 4222\nvar days         = makeGetter('days');                                                                               // 4223\nvar months       = makeGetter('months');                                                                             // 4224\nvar years        = makeGetter('years');                                                                              // 4225\n                                                                                                                     // 4226\nfunction weeks () {                                                                                                  // 4227\n    return absFloor(this.days() / 7);                                                                                // 4228\n}                                                                                                                    // 4229\n                                                                                                                     // 4230\nvar round = Math.round;                                                                                              // 4231\nvar thresholds = {                                                                                                   // 4232\n    ss: 44,         // a few seconds to seconds                                                                      // 4233\n    s : 45,         // seconds to minute                                                                             // 4234\n    m : 45,         // minutes to hour                                                                               // 4235\n    h : 22,         // hours to day                                                                                  // 4236\n    d : 26,         // days to month                                                                                 // 4237\n    M : 11          // months to year                                                                                // 4238\n};                                                                                                                   // 4239\n                                                                                                                     // 4240\n// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize                            // 4241\nfunction substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {                                        // 4242\n    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);                                      // 4243\n}                                                                                                                    // 4244\n                                                                                                                     // 4245\nfunction relativeTime$1 (posNegDuration, withoutSuffix, locale) {                                                    // 4246\n    var duration = createDuration(posNegDuration).abs();                                                             // 4247\n    var seconds  = round(duration.as('s'));                                                                          // 4248\n    var minutes  = round(duration.as('m'));                                                                          // 4249\n    var hours    = round(duration.as('h'));                                                                          // 4250\n    var days     = round(duration.as('d'));                                                                          // 4251\n    var months   = round(duration.as('M'));                                                                          // 4252\n    var years    = round(duration.as('y'));                                                                          // 4253\n                                                                                                                     // 4254\n    var a = seconds <= thresholds.ss && ['s', seconds]  ||                                                           // 4255\n            seconds < thresholds.s   && ['ss', seconds] ||                                                           // 4256\n            minutes <= 1             && ['m']           ||                                                           // 4257\n            minutes < thresholds.m   && ['mm', minutes] ||                                                           // 4258\n            hours   <= 1             && ['h']           ||                                                           // 4259\n            hours   < thresholds.h   && ['hh', hours]   ||                                                           // 4260\n            days    <= 1             && ['d']           ||                                                           // 4261\n            days    < thresholds.d   && ['dd', days]    ||                                                           // 4262\n            months  <= 1             && ['M']           ||                                                           // 4263\n            months  < thresholds.M   && ['MM', months]  ||                                                           // 4264\n            years   <= 1             && ['y']           || ['yy', years];                                            // 4265\n                                                                                                                     // 4266\n    a[2] = withoutSuffix;                                                                                            // 4267\n    a[3] = +posNegDuration > 0;                                                                                      // 4268\n    a[4] = locale;                                                                                                   // 4269\n    return substituteTimeAgo.apply(null, a);                                                                         // 4270\n}                                                                                                                    // 4271\n                                                                                                                     // 4272\n// This function allows you to set the rounding function for relative time strings                                   // 4273\nfunction getSetRelativeTimeRounding (roundingFunction) {                                                             // 4274\n    if (roundingFunction === undefined) {                                                                            // 4275\n        return round;                                                                                                // 4276\n    }                                                                                                                // 4277\n    if (typeof(roundingFunction) === 'function') {                                                                   // 4278\n        round = roundingFunction;                                                                                    // 4279\n        return true;                                                                                                 // 4280\n    }                                                                                                                // 4281\n    return false;                                                                                                    // 4282\n}                                                                                                                    // 4283\n                                                                                                                     // 4284\n// This function allows you to set a threshold for relative time strings                                             // 4285\nfunction getSetRelativeTimeThreshold (threshold, limit) {                                                            // 4286\n    if (thresholds[threshold] === undefined) {                                                                       // 4287\n        return false;                                                                                                // 4288\n    }                                                                                                                // 4289\n    if (limit === undefined) {                                                                                       // 4290\n        return thresholds[threshold];                                                                                // 4291\n    }                                                                                                                // 4292\n    thresholds[threshold] = limit;                                                                                   // 4293\n    if (threshold === 's') {                                                                                         // 4294\n        thresholds.ss = limit - 1;                                                                                   // 4295\n    }                                                                                                                // 4296\n    return true;                                                                                                     // 4297\n}                                                                                                                    // 4298\n                                                                                                                     // 4299\nfunction humanize (withSuffix) {                                                                                     // 4300\n    if (!this.isValid()) {                                                                                           // 4301\n        return this.localeData().invalidDate();                                                                      // 4302\n    }                                                                                                                // 4303\n                                                                                                                     // 4304\n    var locale = this.localeData();                                                                                  // 4305\n    var output = relativeTime$1(this, !withSuffix, locale);                                                          // 4306\n                                                                                                                     // 4307\n    if (withSuffix) {                                                                                                // 4308\n        output = locale.pastFuture(+this, output);                                                                   // 4309\n    }                                                                                                                // 4310\n                                                                                                                     // 4311\n    return locale.postformat(output);                                                                                // 4312\n}                                                                                                                    // 4313\n                                                                                                                     // 4314\nvar abs$1 = Math.abs;                                                                                                // 4315\n                                                                                                                     // 4316\nfunction toISOString$1() {                                                                                           // 4317\n    // for ISO strings we do not use the normal bubbling rules:                                                      // 4318\n    //  * milliseconds bubble up until they become hours                                                             // 4319\n    //  * days do not bubble at all                                                                                  // 4320\n    //  * months bubble up until they become years                                                                   // 4321\n    // This is because there is no context-free conversion between hours and days                                    // 4322\n    // (think of clock changes)                                                                                      // 4323\n    // and also not between days and months (28-31 days per month)                                                   // 4324\n    if (!this.isValid()) {                                                                                           // 4325\n        return this.localeData().invalidDate();                                                                      // 4326\n    }                                                                                                                // 4327\n                                                                                                                     // 4328\n    var seconds = abs$1(this._milliseconds) / 1000;                                                                  // 4329\n    var days         = abs$1(this._days);                                                                            // 4330\n    var months       = abs$1(this._months);                                                                          // 4331\n    var minutes, hours, years;                                                                                       // 4332\n                                                                                                                     // 4333\n    // 3600 seconds -> 60 minutes -> 1 hour                                                                          // 4334\n    minutes           = absFloor(seconds / 60);                                                                      // 4335\n    hours             = absFloor(minutes / 60);                                                                      // 4336\n    seconds %= 60;                                                                                                   // 4337\n    minutes %= 60;                                                                                                   // 4338\n                                                                                                                     // 4339\n    // 12 months -> 1 year                                                                                           // 4340\n    years  = absFloor(months / 12);                                                                                  // 4341\n    months %= 12;                                                                                                    // 4342\n                                                                                                                     // 4343\n                                                                                                                     // 4344\n    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js                  // 4345\n    var Y = years;                                                                                                   // 4346\n    var M = months;                                                                                                  // 4347\n    var D = days;                                                                                                    // 4348\n    var h = hours;                                                                                                   // 4349\n    var m = minutes;                                                                                                 // 4350\n    var s = seconds;                                                                                                 // 4351\n    var total = this.asSeconds();                                                                                    // 4352\n                                                                                                                     // 4353\n    if (!total) {                                                                                                    // 4354\n        // this is the same as C#'s (Noda) and python (isodate)...                                                   // 4355\n        // but not other JS (goog.date)                                                                              // 4356\n        return 'P0D';                                                                                                // 4357\n    }                                                                                                                // 4358\n                                                                                                                     // 4359\n    return (total < 0 ? '-' : '') +                                                                                  // 4360\n        'P' +                                                                                                        // 4361\n        (Y ? Y + 'Y' : '') +                                                                                         // 4362\n        (M ? M + 'M' : '') +                                                                                         // 4363\n        (D ? D + 'D' : '') +                                                                                         // 4364\n        ((h || m || s) ? 'T' : '') +                                                                                 // 4365\n        (h ? h + 'H' : '') +                                                                                         // 4366\n        (m ? m + 'M' : '') +                                                                                         // 4367\n        (s ? s + 'S' : '');                                                                                          // 4368\n}                                                                                                                    // 4369\n                                                                                                                     // 4370\nvar proto$2 = Duration.prototype;                                                                                    // 4371\n                                                                                                                     // 4372\nproto$2.isValid        = isValid$1;                                                                                  // 4373\nproto$2.abs            = abs;                                                                                        // 4374\nproto$2.add            = add$1;                                                                                      // 4375\nproto$2.subtract       = subtract$1;                                                                                 // 4376\nproto$2.as             = as;                                                                                         // 4377\nproto$2.asMilliseconds = asMilliseconds;                                                                             // 4378\nproto$2.asSeconds      = asSeconds;                                                                                  // 4379\nproto$2.asMinutes      = asMinutes;                                                                                  // 4380\nproto$2.asHours        = asHours;                                                                                    // 4381\nproto$2.asDays         = asDays;                                                                                     // 4382\nproto$2.asWeeks        = asWeeks;                                                                                    // 4383\nproto$2.asMonths       = asMonths;                                                                                   // 4384\nproto$2.asYears        = asYears;                                                                                    // 4385\nproto$2.valueOf        = valueOf$1;                                                                                  // 4386\nproto$2._bubble        = bubble;                                                                                     // 4387\nproto$2.get            = get$2;                                                                                      // 4388\nproto$2.milliseconds   = milliseconds;                                                                               // 4389\nproto$2.seconds        = seconds;                                                                                    // 4390\nproto$2.minutes        = minutes;                                                                                    // 4391\nproto$2.hours          = hours;                                                                                      // 4392\nproto$2.days           = days;                                                                                       // 4393\nproto$2.weeks          = weeks;                                                                                      // 4394\nproto$2.months         = months;                                                                                     // 4395\nproto$2.years          = years;                                                                                      // 4396\nproto$2.humanize       = humanize;                                                                                   // 4397\nproto$2.toISOString    = toISOString$1;                                                                              // 4398\nproto$2.toString       = toISOString$1;                                                                              // 4399\nproto$2.toJSON         = toISOString$1;                                                                              // 4400\nproto$2.locale         = locale;                                                                                     // 4401\nproto$2.localeData     = localeData;                                                                                 // 4402\n                                                                                                                     // 4403\n// Deprecations                                                                                                      // 4404\nproto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);\nproto$2.lang = lang;                                                                                                 // 4406\n                                                                                                                     // 4407\n// Side effect imports                                                                                               // 4408\n                                                                                                                     // 4409\n// FORMATTING                                                                                                        // 4410\n                                                                                                                     // 4411\naddFormatToken('X', 0, 0, 'unix');                                                                                   // 4412\naddFormatToken('x', 0, 0, 'valueOf');                                                                                // 4413\n                                                                                                                     // 4414\n// PARSING                                                                                                           // 4415\n                                                                                                                     // 4416\naddRegexToken('x', matchSigned);                                                                                     // 4417\naddRegexToken('X', matchTimestamp);                                                                                  // 4418\naddParseToken('X', function (input, array, config) {                                                                 // 4419\n    config._d = new Date(parseFloat(input, 10) * 1000);                                                              // 4420\n});                                                                                                                  // 4421\naddParseToken('x', function (input, array, config) {                                                                 // 4422\n    config._d = new Date(toInt(input));                                                                              // 4423\n});                                                                                                                  // 4424\n                                                                                                                     // 4425\n// Side effect imports                                                                                               // 4426\n                                                                                                                     // 4427\n                                                                                                                     // 4428\nhooks.version = '2.18.1';                                                                                            // 4429\n                                                                                                                     // 4430\nsetHookCallback(createLocal);                                                                                        // 4431\n                                                                                                                     // 4432\nhooks.fn                    = proto;                                                                                 // 4433\nhooks.min                   = min;                                                                                   // 4434\nhooks.max                   = max;                                                                                   // 4435\nhooks.now                   = now;                                                                                   // 4436\nhooks.utc                   = createUTC;                                                                             // 4437\nhooks.unix                  = createUnix;                                                                            // 4438\nhooks.months                = listMonths;                                                                            // 4439\nhooks.isDate                = isDate;                                                                                // 4440\nhooks.locale                = getSetGlobalLocale;                                                                    // 4441\nhooks.invalid               = createInvalid;                                                                         // 4442\nhooks.duration              = createDuration;                                                                        // 4443\nhooks.isMoment              = isMoment;                                                                              // 4444\nhooks.weekdays              = listWeekdays;                                                                          // 4445\nhooks.parseZone             = createInZone;                                                                          // 4446\nhooks.localeData            = getLocale;                                                                             // 4447\nhooks.isDuration            = isDuration;                                                                            // 4448\nhooks.monthsShort           = listMonthsShort;                                                                       // 4449\nhooks.weekdaysMin           = listWeekdaysMin;                                                                       // 4450\nhooks.defineLocale          = defineLocale;                                                                          // 4451\nhooks.updateLocale          = updateLocale;                                                                          // 4452\nhooks.locales               = listLocales;                                                                           // 4453\nhooks.weekdaysShort         = listWeekdaysShort;                                                                     // 4454\nhooks.normalizeUnits        = normalizeUnits;                                                                        // 4455\nhooks.relativeTimeRounding = getSetRelativeTimeRounding;                                                             // 4456\nhooks.relativeTimeThreshold = getSetRelativeTimeThreshold;                                                           // 4457\nhooks.calendarFormat        = getCalendarFormat;                                                                     // 4458\nhooks.prototype             = proto;                                                                                 // 4459\n                                                                                                                     // 4460\nreturn hooks;                                                                                                        // 4461\n                                                                                                                     // 4462\n})));                                                                                                                // 4463\n                                                                                                                     // 4464\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/momentjs_moment/export.js                                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// moment.js makes `moment` global on the window (or global) object, while Meteor expects a file-scoped global variable\nmoment = this.moment;                                                                                                // 2\ntry {                                                                                                                // 3\n    delete this.moment;                                                                                              // 4\n} catch (e) {                                                                                                        // 5\n}                                                                                                                    // 6\n                                                                                                                     // 7\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['momentjs:moment'] = {}, {\n  moment: moment\n});\n\n})();\n","servePath":"/packages/momentjs_moment.js"}]